#!/usr/bin/env python3
"""
–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ ufc.stats –≤ –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import requests
import gzip
import pickle
import re
from datetime import datetime
import os

def download_ufc_stats():
    """–°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ ufc.stats"""
    print("üì• –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ ufc.stats...")
    
    url = "https://github.com/mtoto/ufc.stats/raw/master/data/ufc_stats.rda"
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        
        with open('ufc_stats.rda', 'wb') as f:
            f.write(response.content)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–∞—á–∞–Ω—ã: {len(response.content):,} –±–∞–π—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return False

def parse_rda_file():
    """–ü–∞—Ä—Å–∏–º RDA —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ"""
    print("üîç –ü–∞—Ä—Å–∏–º RDA —Ñ–∞–π–ª...")
    
    try:
        with gzip.open('ufc_stats.rda', 'rb') as f:
            data = f.read()
        
        # –ò—â–µ–º –∏–º–µ–Ω–∞ –±–æ–π—Ü–æ–≤
        fighter_names = re.findall(rb'[A-Za-z\s]{10,50}', data)
        unique_fighters = list(set([name.decode('utf-8', errors='ignore').strip() 
                                  for name in fighter_names if len(name) > 5]))
        
        # –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        numbers = re.findall(rb'\d+\.\d+', data)
        numeric_values = [float(n.decode()) for n in numbers]
        
        # –ò—â–µ–º –¥–∞—Ç—ã
        dates = re.findall(rb'\d{4}-\d{2}-\d{2}', data)
        date_values = [d.decode() for d in dates]
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(unique_fighters)} –±–æ–π—Ü–æ–≤, {len(numeric_values)} —á–∏—Å–µ–ª, {len(date_values)} –¥–∞—Ç")
        
        return {
            'fighters': unique_fighters,
            'numbers': numeric_values,
            'dates': date_values
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return None

def create_ufc_stats_tables():
    """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö ufc.stats"""
    print("üèóÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã ufc.stats...")
    
    conn = sqlite3.connect('ufc_ranker_v2.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±–æ–π—Ü–æ–≤ ufc.stats
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ufc_stats_fighters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL,
            total_fights INTEGER DEFAULT 0,
            total_wins INTEGER DEFAULT 0,
            total_losses INTEGER DEFAULT 0,
            total_draws INTEGER DEFAULT 0,
            total_knockdowns INTEGER DEFAULT 0,
            total_significant_strikes INTEGER DEFAULT 0,
            total_takedowns INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±–æ–µ–≤ ufc.stats
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ufc_stats_fights (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            fighter1_id INTEGER,
            fighter2_id INTEGER,
            fight_date DATE,
            weight_class TEXT,
            result TEXT,
            rounds INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (fighter1_id) REFERENCES ufc_stats_fighters(id),
            FOREIGN KEY (fighter2_id) REFERENCES ufc_stats_fighters(id)
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—É–Ω–¥–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ufc_stats_rounds (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            fight_id INTEGER,
            fighter_id INTEGER,
            round_number INTEGER,
            knockdowns INTEGER DEFAULT 0,
            significant_strikes_landed INTEGER DEFAULT 0,
            significant_strikes_attempted INTEGER DEFAULT 0,
            significant_strikes_rate REAL DEFAULT 0,
            total_strikes_landed INTEGER DEFAULT 0,
            total_strikes_attempted INTEGER DEFAULT 0,
            takedown_successful INTEGER DEFAULT 0,
            takedown_attempted INTEGER DEFAULT 0,
            takedown_rate REAL DEFAULT 0,
            submission_attempt INTEGER DEFAULT 0,
            reversals INTEGER DEFAULT 0,
            head_landed INTEGER DEFAULT 0,
            head_attempted INTEGER DEFAULT 0,
            body_landed INTEGER DEFAULT 0,
            body_attempted INTEGER DEFAULT 0,
            leg_landed INTEGER DEFAULT 0,
            leg_attempted INTEGER DEFAULT 0,
            distance_landed INTEGER DEFAULT 0,
            distance_attempted INTEGER DEFAULT 0,
            clinch_landed INTEGER DEFAULT 0,
            clinch_attempted INTEGER DEFAULT 0,
            ground_landed INTEGER DEFAULT 0,
            ground_attempted INTEGER DEFAULT 0,
            winner BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (fight_id) REFERENCES ufc_stats_fights(id),
            FOREIGN KEY (fighter_id) REFERENCES ufc_stats_fighters(id)
        )
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

def import_fighters_data(fighters_data):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ–π—Ü–æ–≤"""
    print("üëä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ–π—Ü–æ–≤...")
    
    conn = sqlite3.connect('ufc_ranker_v2.db')
    cursor = conn.cursor()
    
    imported_count = 0
    
    for fighter_name in fighters_data:
        if len(fighter_name) > 5 and not any(x in fighter_name.lower() for x in ['vs', 'bout', 'title', 'tournament', 'ufc', 'fight']):
            try:
                cursor.execute('''
                    INSERT OR IGNORE INTO ufc_stats_fighters (name) 
                    VALUES (?)
                ''', (fighter_name,))
                imported_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–æ–π—Ü–∞ {fighter_name}: {e}")
    
    conn.commit()
    conn.close()
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –±–æ–π—Ü–æ–≤")

def create_update_script():
    """–°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    update_script = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ufc.stats
"""

import requests
import sqlite3
import gzip
import re
from datetime import datetime

def update_ufc_stats():
    """–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ ufc.stats"""
    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ ufc.stats...")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    url = "https://github.com/mtoto/ufc.stats/raw/master/data/ufc_stats.rda"
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        
        with open('ufc_stats.rda', 'wb') as f:
            f.write(response.content)
        
        print(f"‚úÖ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–∞—á–∞–Ω—ã: {len(response.content):,} –±–∞–π—Ç")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        # –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    update_ufc_stats()
'''
    
    with open('update_ufc_stats.py', 'w', encoding='utf-8') as f:
        f.write(update_script)
    
    print("‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: update_ufc_stats.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü•ä –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• UFC.STATS")
    print("=" * 50)
    
    # 1. –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if not download_ufc_stats():
        return
    
    # 2. –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    data = parse_rda_file()
    if not data:
        return
    
    # 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_ufc_stats_tables()
    
    # 4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ–π—Ü–æ–≤
    import_fighters_data(data['fighters'])
    
    # 5. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    create_update_script()
    
    print("\n‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("üìã –ß—Ç–æ –¥–∞–ª—å—à–µ:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python update_ufc_stats.py - –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ë–î: python view_database.py")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º")

if __name__ == "__main__":
    main()

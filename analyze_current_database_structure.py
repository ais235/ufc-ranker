#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import sys

def analyze_database_structure():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect("ufc_ranker_v2.db")
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name NOT LIKE 'sqlite_%'
            ORDER BY name
        """)
        
        tables = cursor.fetchall()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        print()
        
        for table_name, in tables:
            print(f"üìã –¢–ê–ë–õ–ò–¶–ê: {table_name}")
            print("-" * 40)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()
            
            print(f"   –ö–æ–ª–æ–Ω–æ–∫: {len(columns)}")
            for col in columns:
                col_id, name, data_type, not_null, default_val, pk = col
                pk_mark = " üîë" if pk else ""
                not_null_mark = " NOT NULL" if not_null else ""
                default_mark = f" DEFAULT {default_val}" if default_val else ""
                print(f"   ‚Ä¢ {name} ({data_type}){not_null_mark}{default_mark}{pk_mark}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–ø–∏—Å–µ–π
            if count > 0:
                cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
                sample_data = cursor.fetchall()
                print(f"   üìù –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
                for i, row in enumerate(sample_data, 1):
                    print(f"      {i}. {row}")
            
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        print("üîç –ò–ù–î–ï–ö–°–´")
        print("-" * 40)
        cursor.execute("""
            SELECT name, tbl_name, sql FROM sqlite_master 
            WHERE type='index' AND name NOT LIKE 'sqlite_%'
            ORDER BY tbl_name, name
        """)
        
        indexes = cursor.fetchall()
        if indexes:
            for name, table, sql in indexes:
                print(f"   üìå {table}.{name}")
                if sql:
                    print(f"      {sql}")
        else:
            print("   ‚ùå –ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
        print("üîó –í–ù–ï–®–ù–ò–ï –ö–õ–Æ–ß–ò")
        print("-" * 40)
        cursor.execute("PRAGMA foreign_key_list(fighters)")
        fk_fighters = cursor.fetchall()
        if fk_fighters:
            print("   fighters:")
            for fk in fk_fighters:
                print(f"      {fk}")
        
        cursor.execute("PRAGMA foreign_key_list(fights)")
        fk_fights = cursor.fetchall()
        if fk_fights:
            print("   fights:")
            for fk in fk_fights:
                print(f"      {fk}")
        
        cursor.execute("PRAGMA foreign_key_list(rankings)")
        fk_rankings = cursor.fetchall()
        if fk_rankings:
            print("   rankings:")
            for fk in fk_rankings:
                print(f"      {fk}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ë–î: {e}")

if __name__ == "__main__":
    analyze_database_structure()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Scheduled events —Å Wikipedia
"""

import requests
from bs4 import BeautifulSoup
import sqlite3
import re
from datetime import datetime
from urllib.parse import urljoin, urlparse
import time

class ScheduledEventsParser:
    """–ü–∞—Ä—Å–µ—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π UFC"""
    
    def __init__(self, db_path="ufc_ranker_v2.db"):
        self.db_path = db_path
        self.base_url = "https://en.wikipedia.org"
        self.events_url = "https://en.wikipedia.org/wiki/List_of_UFC_events"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
        }
    
    def parse_scheduled_events(self):
        """–ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        
        try:
            print("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏...")
            response = requests.get(self.events_url, headers=self.headers, timeout=30)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É Scheduled events
            scheduled_section = soup.find('h2', {'id': 'Scheduled_events'})
            if not scheduled_section:
                print("‚ùå –°–µ–∫—Ü–∏—è Scheduled events –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return []
            
            scheduled_table = scheduled_section.find_next('table')
            if not scheduled_table:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ Scheduled events –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return []
            
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ Scheduled events –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            events = []
            rows = scheduled_table.find_all('tr')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            
            for i, row in enumerate(rows, 1):
                try:
                    event_data = self.parse_event_row(row)
                    if event_data:
                        events.append(event_data)
                        print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {i}: {event_data['name']}")
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É {i}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
            
            print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(events)}")
            return events
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            return []
    
    def parse_event_row(self, row):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        
        cells = row.find_all(['td', 'th'])
        if len(cells) < 4:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —è—á–µ–µ–∫
        event_cell = cells[0]
        date_cell = cells[1]
        venue_cell = cells[2]
        location_cell = cells[3]
        ref_cell = cells[4] if len(cells) > 4 else None
        
        # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ —Å—Å—ã–ª–∫—É
        event_link = event_cell.find('a')
        event_name = event_cell.get_text(strip=True)
        event_url = None
        
        if event_link:
            href = event_link.get('href')
            if href:
                event_url = urljoin(self.base_url, href)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_text = date_cell.get_text(strip=True)
        parsed_date = self.parse_date(date_text)
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–µ–Ω—É –∏ —Å—Å—ã–ª–∫—É
        venue_link = venue_cell.find('a')
        venue_name = venue_cell.get_text(strip=True)
        venue_url = None
        
        if venue_link:
            href = venue_link.get('href')
            if href:
                venue_url = urljoin(self.base_url, href)
        
        # –ü–∞—Ä—Å–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É
        location_link = location_cell.find('a')
        location_name = location_cell.get_text(strip=True)
        location_url = None
        
        if location_link:
            href = location_link.get('href')
            if href:
                location_url = urljoin(self.base_url, href)
        
        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
        reference_url = None
        if ref_cell:
            ref_link = ref_cell.find('a')
            if ref_link:
                href = ref_link.get('href')
                if href:
                    reference_url = urljoin(self.base_url, href)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –∏ —Ç–∏–ø
        event_number, event_type = self.extract_event_info(event_name)
        
        return {
            'name': event_name,
            'event_number': event_number,
            'event_type': event_type,
            'date': parsed_date,
            'venue': venue_name,
            'venue_url': venue_url,
            'location': location_name,
            'location_url': location_url,
            'event_url': event_url,
            'reference_url': reference_url,
            'status': 'scheduled'
        }
    
    def parse_date(self, date_text):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        
        try:
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            date_patterns = [
                r'(\w+)\s+(\d+),\s+(\d{4})',  # Dec 13, 2025
                r'(\w+)\s+(\d{4})',           # June 2026
                r'(\d{1,2})/(\d{1,2})/(\d{4})',  # 12/25/2025
            ]
            
            for pattern in date_patterns:
                match = re.search(pattern, date_text)
                if match:
                    if len(match.groups()) == 3:
                        month_str, day_str, year_str = match.groups()
                        month = self.month_to_number(month_str)
                        if month:
                            return f"{year_str}-{month:02d}-{int(day_str):02d}"
                    elif len(match.groups()) == 2:
                        month_str, year_str = match.groups()
                        month = self.month_to_number(month_str)
                        if month:
                            return f"{year_str}-{month:02d}-01"  # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
            
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {date_text}")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã '{date_text}': {e}")
            return None
    
    def month_to_number(self, month_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ —á–∏—Å–ª–æ"""
        
        months = {
            'january': 1, 'jan': 1,
            'february': 2, 'feb': 2,
            'march': 3, 'mar': 3,
            'april': 4, 'apr': 4,
            'may': 5,
            'june': 6, 'jun': 6,
            'july': 7, 'jul': 7,
            'august': 8, 'aug': 8,
            'september': 9, 'sep': 9, 'sept': 9,
            'october': 10, 'oct': 10,
            'november': 11, 'nov': 11,
            'december': 12, 'dec': 12
        }
        
        return months.get(month_str.lower())
    
    def extract_event_info(self, event_name):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –∏ —Ç–∏–ø –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        
        try:
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
            patterns = [
                r'UFC\s+(\d+)',  # UFC 323
                r'UFC\s+Fight\s+Night\s+(\d+)',  # UFC Fight Night 266
                r'UFC\s+on\s+(\w+)',  # UFC on ESPN
                r'UFC\s+White\s+House',  # UFC White House
            ]
            
            for pattern in patterns:
                match = re.search(pattern, event_name, re.IGNORECASE)
                if match:
                    if 'Fight Night' in event_name:
                        return int(match.group(1)), 'UFC Fight Night'
                    elif 'UFC on' in event_name:
                        return None, 'UFC on ESPN'  # –ò–ª–∏ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª
                    elif 'White House' in event_name:
                        return None, 'UFC White House'
                    else:
                        return int(match.group(1)), 'UFC'
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None, 'UFC'
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏ '{event_name}': {e}")
            return None, 'UFC'
    
    def save_events_to_db(self, events):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            
            saved_count = 0
            updated_count = 0
            
            for event in events:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
                    cursor.execute("""
                        SELECT id FROM events 
                        WHERE name = ? AND event_number = ? AND event_type = ?
                    """, (event['name'], event['event_number'], event['event_type']))
                    
                    existing = cursor.fetchone()
                    
                    if existing:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                        cursor.execute("""
                            UPDATE events SET
                                date = ?, venue = ?, venue_url = ?,
                                location = ?, location_url = ?, event_url = ?,
                                reference_url = ?, status = ?, updated_at = CURRENT_TIMESTAMP
                            WHERE id = ?
                        """, (
                            event['date'], event['venue'], event['venue_url'],
                            event['location'], event['location_url'], event['event_url'],
                            event['reference_url'], event['status'], existing[0]
                        ))
                        updated_count += 1
                        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {event['name']}")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        cursor.execute("""
                            INSERT INTO events (
                                name, event_number, event_type, date, venue, venue_url,
                                location, location_url, event_url, reference_url, status
                            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (
                            event['name'], event['event_number'], event['event_type'],
                            event['date'], event['venue'], event['venue_url'],
                            event['location'], event['location_url'], event['event_url'],
                            event['reference_url'], event['status']
                        ))
                        saved_count += 1
                        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {event['name']}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{event['name']}': {e}")
            
            conn.commit()
            conn.close()
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
            print(f"  ‚úÖ –ù–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {saved_count}")
            print(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {updated_count}")
            print(f"  üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {saved_count + updated_count}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ü–ê–†–°–ï–† –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–• –°–û–ë–´–¢–ò–ô UFC")
    print("=" * 50)
    
    parser = ScheduledEventsParser()
    
    # –ü–∞—Ä—Å–∏–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    events = parser.parse_scheduled_events()
    
    if events:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        parser.save_events_to_db(events)
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö")

if __name__ == "__main__":
    main()




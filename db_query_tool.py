#!/usr/bin/env python3
"""
üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö UFC Ranker
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
"""

import sqlite3
import pandas as pd
import sys
import argparse
from pathlib import Path

class UFCDataBase:
    def __init__(self, db_path="ufc_ranker_v2.db"):
        self.db_path = db_path
        self.conn = None
        
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.conn = sqlite3.connect(self.db_path)
            self.conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∏
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def execute_query(self, query, params=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        if not self.conn:
            if not self.connect():
                return None
        
        try:
            cursor = self.conn.cursor()
            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = cursor.fetchall()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            columns = [description[0] for description in cursor.description] if cursor.description else []
            data = [dict(zip(columns, row)) for row in results]
            
            return data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def execute_query_pandas(self, query, params=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º DataFrame"""
        if not self.conn:
            if not self.connect():
                return None
        
        try:
            if params:
                df = pd.read_sql_query(query, self.conn, params=params)
            else:
                df = pd.read_sql_query(query, self.conn)
            return df
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def get_tables(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü"""
        query = "SELECT name FROM sqlite_master WHERE type='table' ORDER BY name"
        results = self.execute_query(query)
        return [row['name'] for row in results] if results else []
    
    def get_table_info(self, table_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ"""
        query = f"PRAGMA table_info({table_name})"
        return self.execute_query(query)
    
    def get_table_count(self, table_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        query = f"SELECT COUNT(*) as count FROM {table_name}"
        result = self.execute_query(query)
        return result[0]['count'] if result else 0
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.conn:
            self.conn.close()
            self.conn = None

def print_results(results, limit=20):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if not results:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return
    
    if len(results) == 0:
        print("üì≠ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É—Å—Ç—ã")
        return
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
    display_results = results[:limit]
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
    if len(results) > limit:
        print(f"üìã –ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã—Ö {limit} –∑–∞–ø–∏—Å–µ–π")
    
    print("\n" + "="*80)
    
    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if display_results:
        columns = list(display_results[0].keys())
        header = " | ".join([f"{col:15}" for col in columns])
        print(header)
        print("-" * len(header))
        
        # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
        for row in display_results:
            values = []
            for col in columns:
                value = str(row[col]) if row[col] is not None else "NULL"
                if len(value) > 15:
                    value = value[:12] + "..."
                values.append(f"{value:15}")
            print(" | ".join(values))
    
    print("="*80)

def main():
    parser = argparse.ArgumentParser(description="üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î UFC Ranker")
    parser.add_argument("query", nargs="?", help="SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    parser.add_argument("-f", "--file", help="–§–∞–π–ª —Å SQL –∑–∞–ø—Ä–æ—Å–æ–º")
    parser.add_argument("-t", "--tables", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã")
    parser.add_argument("-i", "--info", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ")
    parser.add_argument("-c", "--count", help="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ")
    parser.add_argument("-l", "--limit", type=int, default=20, help="–õ–∏–º–∏—Ç –≤—ã–≤–æ–¥–∞ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)")
    parser.add_argument("-p", "--pandas", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pandas –¥–ª—è –≤—ã–≤–æ–¥–∞")
    parser.add_argument("-db", "--database", default="ufc_ranker_v2.db", help="–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    db = UFCDataBase(args.database)
    
    try:
        if args.tables:
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            tables = db.get_tables()
            print("üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
            for table in tables:
                count = db.get_table_count(table)
                print(f"  üìä {table:20} - {count:4} –∑–∞–ø–∏—Å–µ–π")
        
        elif args.info:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
            info = db.get_table_info(args.info)
            if info:
                print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: {args.info}")
                print("-" * 50)
                for col in info:
                    print(f"  {col['name']:20} {col['type']:15} {'NOT NULL' if not col['notnull'] else 'NULL':8}")
            else:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {args.info} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        elif args.count:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            count = db.get_table_count(args.count)
            print(f"üìä –¢–∞–±–ª–∏—Ü–∞ {args.count}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        elif args.query:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å
            results = db.execute_query(args.query)
            if results is not None:
                print_results(results, args.limit)
        
        elif args.file:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–∑ —Ñ–∞–π–ª–∞
            try:
                with open(args.file, 'r', encoding='utf-8') as f:
                    query = f.read()
                results = db.execute_query(query)
                if results is not None:
                    print_results(results, args.limit)
            except FileNotFoundError:
                print(f"‚ùå –§–∞–π–ª {args.file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            print("üîß –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –ë–î UFC Ranker")
            print("–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å—ã (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
            print("-" * 50)
            
            while True:
                try:
                    query = input("\nSQL> ").strip()
                    
                    if query.lower() in ['exit', 'quit', 'q']:
                        break
                    
                    if not query:
                        continue
                    
                    if query.lower() == 'tables':
                        tables = db.get_tables()
                        print("üìã –¢–∞–±–ª–∏—Ü—ã:")
                        for table in tables:
                            count = db.get_table_count(table)
                            print(f"  üìä {table:20} - {count:4} –∑–∞–ø–∏—Å–µ–π")
                        continue
                    
                    results = db.execute_query(query)
                    if results is not None:
                        print_results(results, args.limit)
                
                except KeyboardInterrupt:
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    finally:
        db.close()

if __name__ == "__main__":
    main()











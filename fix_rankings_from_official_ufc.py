#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ UFC –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã UFC Rankings
"""

import sqlite3
import requests
from lxml import html
import re
from datetime import datetime
import os
import shutil

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = f"ufc_ranker_v2_backup_{timestamp}.db"
    shutil.copy2("ufc_ranker_v2.db", backup_file)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
    return backup_file

def get_page(url):
    """–ü–æ–ª—É—á–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        return html.fromstring(response.content)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url}: {e}")
        return None

def parse_ufc_rankings():
    """–ü–∞—Ä—Å–∏—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ UFC —Å Wikipedia"""
    
    url = "https://en.wikipedia.org/wiki/UFC_rankings"
    tree = get_page(url)
    
    if not tree:
        return None
    
    rankings_data = {}
    
    # –ú–∞–ø–ø–∏–Ω–≥ –≤–µ—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    weight_class_mapping = {
        "Heavyweight": "–¢—è–∂–µ–ª—ã–π –≤–µ—Å",
        "Light Heavyweight": "–ü–æ–ª—É—Ç—è–∂–µ–ª—ã–π –≤–µ—Å", 
        "Middleweight": "–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å",
        "Welterweight": "–ü–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å",
        "Lightweight": "–õ–µ–≥–∫–∏–π –≤–µ—Å",
        "Featherweight": "–ü–æ–ª—É–ª–µ–≥–∫–∏–π –≤–µ—Å",
        "Bantamweight": "–õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å",
        "Flyweight": "–ù–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å",
        "Women's Bantamweight": "–ñ–µ–Ω—Å–∫–∏–π –ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å",
        "Women's Flyweight": "–ñ–µ–Ω—Å–∫–∏–π –Ω–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å",
        "Women's Strawweight": "–ñ–µ–Ω—Å–∫–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å"
    }
    
    # XPath –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    weight_class_xpaths = {
        "Heavyweight": "//h2[contains(text(), 'Heavyweight')]/following-sibling::table[1]",
        "Light Heavyweight": "//h2[contains(text(), 'Light Heavyweight')]/following-sibling::table[1]",
        "Middleweight": "//h2[contains(text(), 'Middleweight')]/following-sibling::table[1]",
        "Welterweight": "//h2[contains(text(), 'Welterweight')]/following-sibling::table[1]",
        "Lightweight": "//h2[contains(text(), 'Lightweight')]/following-sibling::table[1]",
        "Featherweight": "//h2[contains(text(), 'Featherweight')]/following-sibling::table[1]",
        "Bantamweight": "//h2[contains(text(), 'Bantamweight')]/following-sibling::table[1]",
        "Flyweight": "//h2[contains(text(), 'Flyweight')]/following-sibling::table[1]",
        "Women's Bantamweight": "//h2[contains(text(), \"Women's Bantamweight\")]/following-sibling::table[1]",
        "Women's Flyweight": "//h2[contains(text(), \"Women's Flyweight\")]/following-sibling::table[1]",
        "Women's Strawweight": "//h2[contains(text(), \"Women's Strawweight\")]/following-sibling::table[1]"
    }
    
    for weight_class, xpath in weight_class_xpaths.items():
        print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ {weight_class}...")
        
        table = tree.xpath(xpath)
        if not table:
            print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {weight_class}")
            continue
            
        table = table[0]
        rows = table.xpath('.//tr')
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤—ã–µ 1-2 —Å—Ç—Ä–æ–∫–∏)
        if len(rows) <= 1:
            print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –¥–ª—è {weight_class}")
            continue
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        header_rows = 1
        if len(rows) > 1:
            first_row = rows[0]
            first_cell = first_row.xpath('.//td | .//th')
            if first_cell and 'rank' in first_cell[0].text_content().lower():
                header_rows = 1
            else:
                header_rows = 0
        
        rows = rows[header_rows:]
        
        weight_rankings = []
        
        for i, row in enumerate(rows):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                cells = row.xpath('.//td')
                if len(cells) < 3:
                    continue
                
                # –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
                rank_cell = cells[0]
                rank_text = rank_cell.text_content().strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not rank_text or rank_text == '':
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                if 'C' in rank_text or 'Champion' in rank_text:
                    rank_position = 0  # –ß–µ–º–ø–∏–æ–Ω
                    is_champion = True
                else:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                    rank_match = re.search(r'(\d+)', rank_text)
                    if rank_match:
                        rank_position = int(rank_match.group(1))
                        is_champion = False
                    else:
                        continue
                
                # –ò–º—è –±–æ–π—Ü–∞ –∏ —Å—Å—ã–ª–∫–∞
                fighter_cell = cells[1]
                fighter_link = fighter_cell.xpath('.//a')
                
                if fighter_link:
                    fighter_name = fighter_link[0].text_content().strip()
                    fighter_url = fighter_link[0].get('href', '')
                    if fighter_url.startswith('/wiki/'):
                        fighter_url = 'https://en.wikipedia.org' + fighter_url
                else:
                    fighter_name = fighter_cell.text_content().strip()
                    fighter_url = ''
                
                # –†–µ–∫–æ—Ä–¥
                record_cell = cells[2]
                record_text = record_cell.text_content().strip()
                
                # –ü–∞—Ä—Å–∏–º —Ä–µ–∫–æ—Ä–¥
                wins, losses, draws, nc = parse_record(record_text)
                
                weight_rankings.append({
                    'rank_position': rank_position,
                    'is_champion': is_champion,
                    'fighter_name': fighter_name,
                    'fighter_url': fighter_url,
                    'record': record_text,
                    'wins': wins,
                    'losses': losses,
                    'draws': draws,
                    'nc': nc
                })
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ {i+1}: {e}")
                continue
        
        if weight_rankings:
            rankings_data[weight_class] = weight_rankings
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(weight_rankings)} –±–æ–π—Ü–æ–≤")
        else:
            print(f"   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {weight_class}")
    
    return rankings_data

def parse_record(record_text):
    """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∫–æ—Ä–¥ –±–æ–π—Ü–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    try:
        # –ü—Ä–∏–º–µ—Ä—ã: "17‚Äì0", "27‚Äì1", "20‚Äì1‚Äì1 (1 NC)"
        record_text = record_text.strip()
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        record_text = re.sub(r'[^\d‚Äì\-\(\)\s]', '', record_text)
        
        # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Ä–µ–∫–æ—Ä–¥–∞
        main_parts = re.split(r'[‚Äì\-]', record_text)
        
        wins = int(main_parts[0]) if main_parts[0].strip().isdigit() else 0
        losses = int(main_parts[1]) if len(main_parts) > 1 and main_parts[1].strip().isdigit() else 0
        
        # –ü–∞—Ä—Å–∏–º NC (No Contest)
        nc_match = re.search(r'\((\d+)\s*NC\)', record_text)
        nc = int(nc_match.group(1)) if nc_match else 0
        
        # –ü–∞—Ä—Å–∏–º –Ω–∏—á—å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ—Ç—å—è —á–∞—Å—Ç—å)
        draws = 0
        if len(main_parts) > 2:
            third_part = main_parts[2].strip()
            if third_part.isdigit():
                draws = int(third_part)
        
        return wins, losses, draws, nc
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–∫–æ—Ä–¥–∞ '{record_text}': {e}")
        return 0, 0, 0, 0

def clear_rankings_table(cursor):
    """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É rankings"""
    print("üóëÔ∏è –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É rankings...")
    cursor.execute("DELETE FROM rankings")
    print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ rankings –æ—á–∏—â–µ–Ω–∞")

def update_rankings_in_database(rankings_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = create_backup()
    
    try:
        conn = sqlite3.connect("ufc_ranker_v2.db")
        cursor = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É rankings
        clear_rankings_table(cursor)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤–µ—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute("SELECT id, name_en FROM weight_classes")
        weight_classes = {name_en: id for id, name_en in cursor.fetchall()}
        
        total_updated = 0
        
        for weight_class, rankings in rankings_data.items():
            print(f"\nüìä –û–±–Ω–æ–≤–ª—è–µ–º {weight_class}...")
            
            # –ü–æ–ª—É—á–∞–µ–º ID –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            weight_class_id = weight_classes.get(weight_class)
            if not weight_class_id:
                print(f"   ‚ùå –í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è {weight_class} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                continue
            
            for ranking in rankings:
                try:
                    # –ò—â–µ–º –±–æ–π—Ü–∞ –ø–æ –∏–º–µ–Ω–∏
                    fighter_name = ranking['fighter_name']
                    cursor.execute("""
                        SELECT id FROM fighters 
                        WHERE name_en = ? OR full_name = ?
                        ORDER BY 
                            CASE WHEN name_en = ? THEN 1 ELSE 2 END,
                            id
                        LIMIT 1
                    """, (fighter_name, fighter_name, fighter_name))
                    
                    fighter_result = cursor.fetchone()
                    
                    if not fighter_result:
                        print(f"   ‚ö†Ô∏è –ë–æ–µ—Ü {fighter_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                        continue
                    
                    fighter_id = fighter_result[0]
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
                    cursor.execute("""
                        INSERT INTO rankings (
                            fighter_id, weight_class_id, rank_position, 
                            is_champion, created_at, updated_at
                        ) VALUES (?, ?, ?, ?, ?, ?)
                    """, (
                        fighter_id,
                        weight_class_id,
                        ranking['rank_position'],
                        ranking['is_champion'],
                        datetime.now(),
                        datetime.now()
                    ))
                    
                    total_updated += 1
                    
                    champion_mark = "üëë" if ranking['is_champion'] else ""
                    print(f"   {champion_mark} #{ranking['rank_position']:2d} {fighter_name}")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {ranking['fighter_name']}: {e}")
                    continue
        
        conn.commit()
        conn.close()
        
        print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {total_updated} —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {e}")
        return False

def show_updated_rankings():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏"""
    
    try:
        conn = sqlite3.connect("ufc_ranker_v2.db")
        cursor = conn.cursor()
        
        print("\nüèÜ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –†–ï–ô–¢–ò–ù–ì–ò UFC")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
        cursor.execute("""
            SELECT wc.name_ru, wc.name_en, COUNT(r.id) as count
            FROM weight_classes wc
            LEFT JOIN rankings r ON wc.id = r.weight_class_id
            GROUP BY wc.id, wc.name_ru, wc.name_en
            ORDER BY wc.id
        """)
        
        weight_classes = cursor.fetchall()
        
        for name_ru, name_en, count in weight_classes:
            print(f"\n‚öñÔ∏è {name_ru} ({name_en})")
            print("-" * 40)
            
            if count == 0:
                print("   ‚ùå –ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            cursor.execute("""
                SELECT 
                    f.name_en,
                    f.nickname,
                    r.rank_position,
                    r.is_champion,
                    fr.wins,
                    fr.losses,
                    fr.draws,
                    fr.no_contests
                FROM rankings r
                JOIN fighters f ON r.fighter_id = f.id
                LEFT JOIN fight_records fr ON f.id = fr.fighter_id
                WHERE r.weight_class_id = (
                    SELECT id FROM weight_classes WHERE name_en = ?
                )
                ORDER BY r.rank_position ASC
                LIMIT 10
            """, (name_en,))
            
            fighters = cursor.fetchall()
            
            for fighter in fighters:
                name_en, nickname, rank_pos, is_champion, wins, losses, draws, nc = fighter
                
                champion_mark = "üëë" if is_champion else ""
                nickname_str = f' "{nickname}"' if nickname else ""
                record_str = f"{wins}-{losses}" if wins is not None and losses is not None else "N/A"
                if draws and draws > 0:
                    record_str += f"-{draws}"
                if nc and nc > 0:
                    record_str += f" ({nc} NC)"
                
                print(f"   {champion_mark} #{rank_pos:2d} {name_en}{nickname_str} ({record_str})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM rankings")
        total_rankings = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM rankings WHERE is_champion = 1")
        total_champions = cursor.fetchone()[0]
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ü•ä –í—Å–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {total_rankings}")
        print(f"   üëë –ß–µ–º–ø–∏–æ–Ω–æ–≤: {total_champions}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü•ä –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ô–¢–ò–ù–ì–û–í UFC")
    print("=" * 50)
    print("üìö –ò—Å—Ç–æ—á–Ω–∏–∫: https://en.wikipedia.org/wiki/UFC_rankings")
    print()
    
    # –ü–∞—Ä—Å–∏–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
    print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ UFC...")
    rankings_data = parse_ufc_rankings()
    
    if not rankings_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
        return
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(rankings_data)} –≤–µ—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("\nüíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if update_rankings_in_database(rankings_data):
        print("‚úÖ –†–µ–π—Ç–∏–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        show_updated_rankings()
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö UFC (–±–µ–∑ Redis)
"""

import sys
import os
from typing import Dict, List, Any
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tasks.local_celery_app import task, local_celery_app, beat_scheduler, crontab
from parsers.data_source_manager import DataSourceManager
from database.local_config import SessionLocal
from database.models import Fighter, WeightClass, Ranking, Event, Fight, FightStats


@task
def update_rankings(force_refresh: bool = False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ UFC"""
    try:
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (force_refresh={force_refresh})")
        
        manager = DataSourceManager()
        rankings = manager.get_rankings(force_refresh)
        
        if rankings:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            db = SessionLocal()
            try:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
                db.query(Ranking).delete()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
                for category_name, fighters in rankings.items():
                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤–µ—Å–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    weight_class = db.query(WeightClass).filter(
                        WeightClass.name_ru == category_name
                    ).first()
                    
                    if not weight_class:
                        weight_class = WeightClass(
                            name_ru=category_name,
                            name_en=category_name,  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                            gender='male'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        )
                        db.add(weight_class)
                        db.flush()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –±–æ–π—Ü–æ–≤
                    for fighter_data in fighters:
                        fighter = db.query(Fighter).filter(
                            Fighter.name_ru == fighter_data.get('name', '')
                        ).first()
                        
                        if fighter:
                            ranking = Ranking(
                                fighter_id=fighter.id,
                                weight_class_id=weight_class.id,
                                rank_position=fighter_data.get('rank_position'),
                                is_champion=fighter_data.get('is_champion', False)
                            )
                            db.add(ranking)
                
                db.commit()
                print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(rankings)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                
                return {
                    'status': 'success',
                    'categories_updated': len(rankings),
                    'timestamp': datetime.utcnow().isoformat()
                }
                
            except Exception as e:
                db.rollback()
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}")
                raise
            finally:
                db.close()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏")
            return {'status': 'error', 'message': 'No rankings data received'}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}")
        return {'status': 'error', 'message': str(e)}


@task
def update_fighters(force_refresh: bool = False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ–π—Ü–æ–≤"""
    try:
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–π—Ü–æ–≤ (force_refresh={force_refresh})")
        
        manager = DataSourceManager()
        fighters = manager.get_fighters()
        
        if fighters:
            db = SessionLocal()
            try:
                updated_count = 0
                created_count = 0
                
                for fighter_data in fighters:
                    fighter = db.query(Fighter).filter(
                        Fighter.name_ru == fighter_data.get('name', '')
                    ).first()
                    
                    if fighter:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ–π—Ü–∞
                        fighter.nickname = fighter_data.get('nickname', fighter.nickname)
                        fighter.country = fighter_data.get('country', fighter.country)
                        fighter.height = fighter_data.get('height', fighter.height)
                        fighter.weight = fighter_data.get('weight', fighter.weight)
                        fighter.reach = fighter_data.get('reach', fighter.reach)
                        fighter.age = fighter_data.get('age', fighter.age)
                        fighter.win = fighter_data.get('wins', fighter.win)
                        fighter.lose = fighter_data.get('losses', fighter.lose)
                        fighter.draw = fighter_data.get('draws', fighter.draw)
                        fighter.image_url = fighter_data.get('image_url', fighter.image_url)
                        updated_count += 1
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ–π—Ü–∞
                        fighter = Fighter(
                            name_ru=fighter_data.get('name', ''),
                            name_en=fighter_data.get('name', ''),
                            nickname=fighter_data.get('nickname', ''),
                            country=fighter_data.get('country', ''),
                            height=fighter_data.get('height', 0),
                            weight=fighter_data.get('weight', 0),
                            reach=fighter_data.get('reach', 0),
                            age=fighter_data.get('age', 0),
                            win=fighter_data.get('wins', 0),
                            lose=fighter_data.get('losses', 0),
                            draw=fighter_data.get('draws', 0),
                            weight_class=fighter_data.get('weight_class', ''),
                            image_url=fighter_data.get('image_url', ''),
                            profile_url=fighter_data.get('profile_url', ''),
                            career="UFC"
                        )
                        db.add(fighter)
                        created_count += 1
                
                db.commit()
                print(f"‚úÖ –ë–æ–π—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {updated_count} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {created_count} —Å–æ–∑–¥–∞–Ω–æ")
                
                return {
                    'status': 'success',
                    'updated': updated_count,
                    'created': created_count,
                    'timestamp': datetime.utcnow().isoformat()
                }
                
            except Exception as e:
                db.rollback()
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–æ–π—Ü–æ–≤: {e}")
                raise
            finally:
                db.close()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ–π—Ü–æ–≤")
            return {'status': 'error', 'message': 'No fighters data received'}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ–π—Ü–æ–≤: {e}")
        return {'status': 'error', 'message': str(e)}


@task
def update_events(force_refresh: bool = False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è UFC"""
    try:
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π (force_refresh={force_refresh})")
        
        manager = DataSourceManager()
        events = manager.get_events()
        
        if events:
            db = SessionLocal()
            try:
                updated_count = 0
                created_count = 0
                
                for event_data in events:
                    event = db.query(Event).filter(
                        Event.name == event_data.get('name', '')
                    ).first()
                    
                    if event:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                        if event_data.get('date'):
                            event.date = datetime.strptime(event_data.get('date', ''), '%Y-%m-%d').date()
                        event.location = event_data.get('location', event.location)
                        event.venue = event_data.get('venue', event.venue)
                        event.attendance = event_data.get('attendance', event.attendance)
                        event.image_url = event_data.get('image_url', event.image_url)
                        event.is_upcoming = event_data.get('is_upcoming', event.is_upcoming)
                        updated_count += 1
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        event = Event(
                            name=event_data.get('name', ''),
                            date=datetime.strptime(event_data.get('date', ''), '%Y-%m-%d').date() if event_data.get('date') else None,
                            location=event_data.get('location', ''),
                            venue=event_data.get('venue', ''),
                            attendance=event_data.get('attendance', 0),
                            image_url=event_data.get('image_url', ''),
                            is_upcoming=event_data.get('is_upcoming', True)
                        )
                        db.add(event)
                        created_count += 1
                
                db.commit()
                print(f"‚úÖ –°–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {updated_count} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {created_count} —Å–æ–∑–¥–∞–Ω–æ")
                
                return {
                    'status': 'success',
                    'updated': updated_count,
                    'created': created_count,
                    'timestamp': datetime.utcnow().isoformat()
                }
                
            except Exception as e:
                db.rollback()
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
                raise
            finally:
                db.close()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π")
            return {'status': 'error', 'message': 'No events data received'}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
        return {'status': 'error', 'message': str(e)}


@task
def update_all_data(force_refresh: bool = False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        rankings_task = update_rankings.delay(force_refresh)
        fighters_task = update_fighters.delay(force_refresh)
        events_task = update_events.delay(force_refresh)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = {
            'rankings': rankings_task.result,
            'fighters': fighters_task.result,
            'events': events_task.result
        }
        
        print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return {
            'status': 'success',
            'results': results,
            'timestamp': datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {'status': 'error', 'message': str(e)}


def setup_periodic_tasks():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
    print("üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á...")
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ 6:00
    beat_scheduler.add_periodic_task(
        crontab(hour=6, minute=0),
        update_rankings,
        name="daily_rankings_update"
    )
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–π—Ü–æ–≤ –≤ 7:00
    beat_scheduler.add_periodic_task(
        crontab(hour=7, minute=0),
        update_fighters,
        name="daily_fighters_update"
    )
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ 8:00
    beat_scheduler.add_periodic_task(
        crontab(hour=8, minute=0),
        update_events,
        name="daily_events_update"
    )
    
    print("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º worker
    local_celery_app.start_worker()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    setup_periodic_tasks()
    beat_scheduler.start()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...")
    result = update_rankings.delay(force_refresh=True)
    
    # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    import time
    time.sleep(5)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    task_result = local_celery_app.get_task_result(result.id)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏: {task_result}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    all_tasks = local_celery_app.get_all_tasks()
    print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(all_tasks)}")
    for task_id, task_info in all_tasks.items():
        print(f"  {task_id}: {task_info['status']}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º worker
    local_celery_app.stop_worker()
    beat_scheduler.stop()

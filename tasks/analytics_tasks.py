#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è UFC Ranker
"""

import sys
import os
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
from sqlalchemy import func, desc, and_

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tasks.celery_app import celery_app
from database.config import SessionLocal
from database.models import Fighter, WeightClass, Ranking, Event, Fight, FightStats


@celery_app.task
def generate_daily_analytics():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    try:
        db = SessionLocal()
        
        analytics = {
            'date': datetime.utcnow().isoformat(),
            'fighters_stats': get_fighters_analytics(db),
            'rankings_changes': get_rankings_changes(db),
            'events_stats': get_events_analytics(db),
            'fight_stats': get_fight_stats_analytics(db),
            'top_performers': get_top_performers(db),
            'country_stats': get_country_stats(db)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ Redis –∏–ª–∏ –ë–î
        save_analytics(analytics)
        
        print("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        return analytics
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        raise
    finally:
        db.close()


def get_fighters_analytics(db) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –±–æ–π—Ü–∞–º"""
    total_fighters = db.query(Fighter).count()
    
    # –ë–æ–π—Ü—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    country_stats = db.query(
        Fighter.country,
        func.count(Fighter.id).label('count')
    ).filter(
        Fighter.country.isnot(None)
    ).group_by(Fighter.country).order_by(
        func.count(Fighter.id).desc()
    ).limit(10).all()
    
    # –ë–æ–π—Ü—ã –ø–æ –≤–µ—Å–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    weight_class_stats = db.query(
        Fighter.weight_class,
        func.count(Fighter.id).label('count')
    ).filter(
        Fighter.weight_class.isnot(None)
    ).group_by(Fighter.weight_class).all()
    
    # –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    age_stats = db.query(
        func.avg(Fighter.age).label('avg_age'),
        func.min(Fighter.age).label('min_age'),
        func.max(Fighter.age).label('max_age')
    ).filter(Fighter.age.isnot(None)).first()
    
    return {
        'total_fighters': total_fighters,
        'top_countries': [{'country': country, 'count': count} for country, count in country_stats],
        'weight_class_distribution': [{'weight_class': wc, 'count': count} for wc, count in weight_class_stats],
        'age_stats': {
            'average': float(age_stats.avg_age) if age_stats.avg_age else 0,
            'min': age_stats.min_age or 0,
            'max': age_stats.max_age or 0
        }
    }


def get_rankings_changes(db) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö"""
    # –ß–µ–º–ø–∏–æ–Ω—ã
    champions = db.query(Ranking).filter(Ranking.is_champion == True).count()
    
    # –†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    rankings_by_category = db.query(
        WeightClass.name_ru,
        func.count(Ranking.id).label('count')
    ).join(Ranking).group_by(WeightClass.name_ru).all()
    
    return {
        'total_champions': champions,
        'rankings_by_category': [{'category': cat, 'count': count} for cat, count in rankings_by_category]
    }


def get_events_analytics(db) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º"""
    total_events = db.query(Event).count()
    upcoming_events = db.query(Event).filter(Event.is_upcoming == True).count()
    
    # –°–æ–±—ã—Ç–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_events = db.query(
        func.date_trunc('month', Event.date).label('month'),
        func.count(Event.id).label('count')
    ).filter(
        Event.date.isnot(None)
    ).group_by(
        func.date_trunc('month', Event.date)
    ).order_by(desc('month')).limit(12).all()
    
    # –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
    avg_attendance = db.query(
        func.avg(Event.attendance).label('avg_attendance')
    ).filter(
        Event.attendance.isnot(None),
        Event.attendance > 0
    ).first()
    
    return {
        'total_events': total_events,
        'upcoming_events': upcoming_events,
        'monthly_events': [{'month': str(month), 'count': count} for month, count in monthly_events],
        'average_attendance': float(avg_attendance.avg_attendance) if avg_attendance.avg_attendance else 0
    }


def get_fight_stats_analytics(db) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ–µ–≤"""
    total_fights = db.query(Fight).count()
    total_fight_stats = db.query(FightStats).count()
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    avg_stats = db.query(
        func.avg(FightStats.significant_strikes_landed).label('avg_sig_strikes'),
        func.avg(FightStats.takedown_successful).label('avg_takedowns'),
        func.avg(FightStats.knockdowns).label('avg_knockdowns')
    ).first()
    
    # –¢–æ–ø –±–æ–π—Ü–æ–≤ –ø–æ –∑–Ω–∞—á–∏–º—ã–º —É–¥–∞—Ä–∞–º
    top_strikers = db.query(
        Fighter.name_ru,
        func.sum(FightStats.significant_strikes_landed).label('total_strikes')
    ).join(FightStats).group_by(Fighter.id, Fighter.name_ru).order_by(
        desc('total_strikes')
    ).limit(10).all()
    
    # –¢–æ–ø –±–æ–π—Ü–æ–≤ –ø–æ —Ç–µ–π–∫–¥–∞—É–Ω–∞–º
    top_grapplers = db.query(
        Fighter.name_ru,
        func.sum(FightStats.takedown_successful).label('total_takedowns')
    ).join(FightStats).group_by(Fighter.id, Fighter.name_ru).order_by(
        desc('total_takedowns')
    ).limit(10).all()
    
    return {
        'total_fights': total_fights,
        'total_fight_stats': total_fight_stats,
        'average_stats': {
            'significant_strikes': float(avg_stats.avg_sig_strikes) if avg_stats.avg_sig_strikes else 0,
            'takedowns': float(avg_stats.avg_takedowns) if avg_stats.avg_takedowns else 0,
            'knockdowns': float(avg_stats.avg_knockdowns) if avg_stats.avg_knockdowns else 0
        },
        'top_strikers': [{'fighter': name, 'strikes': strikes} for name, strikes in top_strikers],
        'top_grapplers': [{'fighter': name, 'takedowns': takedowns} for name, takedowns in top_grapplers]
    }


def get_top_performers(db) -> Dict[str, List[Dict]]:
    """–¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º"""
    
    # –¢–æ–ø –ø–æ –ø–æ–±–µ–¥–∞–º
    top_winners = db.query(
        Fighter.name_ru,
        Fighter.win,
        Fighter.lose,
        Fighter.draw
    ).order_by(desc(Fighter.win)).limit(10).all()
    
    # –¢–æ–ø –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø–æ–±–µ–¥
    top_win_percentage = db.query(
        Fighter.name_ru,
        Fighter.win,
        Fighter.lose,
        Fighter.draw,
        func.round(
            (Fighter.win * 100.0) / (Fighter.win + Fighter.lose + Fighter.draw), 2
        ).label('win_percentage')
    ).filter(
        (Fighter.win + Fighter.lose + Fighter.draw) > 0
    ).order_by(desc('win_percentage')).limit(10).all()
    
    return {
        'most_wins': [{'fighter': name, 'wins': wins, 'losses': losses, 'draws': draws} 
                     for name, wins, losses, draws in top_winners],
        'best_win_percentage': [{'fighter': name, 'wins': wins, 'losses': losses, 'draws': draws, 'percentage': percentage}
                               for name, wins, losses, draws, percentage in top_win_percentage]
    }


def get_country_stats(db) -> Dict[str, Any]:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
    # –¢–æ–ø —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–π—Ü–æ–≤
    top_countries = db.query(
        Fighter.country,
        func.count(Fighter.id).label('fighter_count'),
        func.avg(Fighter.win).label('avg_wins'),
        func.avg(Fighter.lose).label('avg_losses')
    ).filter(
        Fighter.country.isnot(None)
    ).group_by(Fighter.country).order_by(
        desc('fighter_count')
    ).limit(15).all()
    
    # –ß–µ–º–ø–∏–æ–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    champions_by_country = db.query(
        Fighter.country,
        func.count(Ranking.id).label('champion_count')
    ).join(Ranking).filter(
        Ranking.is_champion == True,
        Fighter.country.isnot(None)
    ).group_by(Fighter.country).order_by(
        desc('champion_count')
    ).all()
    
    return {
        'top_countries': [{'country': country, 'fighters': count, 'avg_wins': float(avg_wins) if avg_wins else 0, 'avg_losses': float(avg_losses) if avg_losses else 0}
                         for country, count, avg_wins, avg_losses in top_countries],
        'champions_by_country': [{'country': country, 'champions': count} for country, count in champions_by_country]
    }


def save_analytics(analytics: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ Redis –∏–ª–∏ –ë–î"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        # –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –ë–î
        print("üíæ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")


@celery_app.task
def generate_fighter_analytics(fighter_id: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ–π—Ü–∞"""
    print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –±–æ–π—Ü–∞ {fighter_id}...")
    
    try:
        db = SessionLocal()
        
        fighter = db.query(Fighter).filter(Fighter.id == fighter_id).first()
        if not fighter:
            raise Exception(f"–ë–æ–µ—Ü —Å ID {fighter_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–µ–≤
        fight_stats = db.query(FightStats).filter(FightStats.fighter_id == fighter_id).all()
        
        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_rounds = len(fight_stats)
        total_fights = db.query(Fight).filter(
            (Fight.fighter1_id == fighter_id) | (Fight.fighter2_id == fighter_id)
        ).count()
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_sig_strikes = sum(stat.significant_strikes_landed for stat in fight_stats) / total_rounds if total_rounds > 0 else 0
        avg_takedowns = sum(stat.takedown_successful for stat in fight_stats) / total_rounds if total_rounds > 0 else 0
        avg_knockdowns = sum(stat.knockdowns for stat in fight_stats) / total_rounds if total_rounds > 0 else 0
        
        analytics = {
            'fighter_id': fighter_id,
            'fighter_name': fighter.name_ru,
            'total_fights': total_fights,
            'total_rounds': total_rounds,
            'average_stats': {
                'significant_strikes_per_round': round(avg_sig_strikes, 2),
                'takedowns_per_round': round(avg_takedowns, 2),
                'knockdowns_per_round': round(avg_knockdowns, 2)
            },
            'win_loss_record': {
                'wins': fighter.win,
                'losses': fighter.lose,
                'draws': fighter.draw,
                'win_percentage': round((fighter.win / (fighter.win + fighter.lose + fighter.draw)) * 100, 2) if (fighter.win + fighter.lose + fighter.draw) > 0 else 0
            }
        }
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {fighter.name_ru} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        return analytics
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–æ–π—Ü–∞: {e}")
        raise
    finally:
        db.close()


@celery_app.task
def generate_weight_class_analytics(weight_class_id: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {weight_class_id}...")
    
    try:
        db = SessionLocal()
        
        weight_class = db.query(WeightClass).filter(WeightClass.id == weight_class_id).first()
        if not weight_class:
            raise Exception(f"–í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {weight_class_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ë–æ–π—Ü—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        fighters_in_class = db.query(Fighter).filter(Fighter.weight_class == weight_class.name_ru).count()
        
        # –†–µ–π—Ç–∏–Ω–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        rankings = db.query(Ranking).filter(Ranking.weight_class_id == weight_class_id).count()
        
        # –ë–æ–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        fights_in_class = db.query(Fight).filter(Fight.weight_class_id == weight_class_id).count()
        
        analytics = {
            'weight_class_id': weight_class_id,
            'weight_class_name': weight_class.name_ru,
            'fighters_count': fighters_in_class,
            'rankings_count': rankings,
            'fights_count': fights_in_class
        }
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {weight_class.name_ru} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        return analytics
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        raise
    finally:
        db.close()

#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Celery –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ Redis
"""

import os
import time
from datetime import datetime
from typing import Any, Callable, Dict
import threading
import queue


class LocalTask:
    """–õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    def __init__(self, func: Callable, args: tuple = (), kwargs: dict = None):
        self.func = func
        self.args = args
        self.kwargs = kwargs or {}
        self.id = f"{func.__name__}_{int(time.time())}"
        self.status = 'PENDING'
        self.result = None
        self.error = None
        self.created_at = datetime.now()
    
    def execute(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É"""
        try:
            self.status = 'STARTED'
            self.result = self.func(*self.args, **self.kwargs)
            self.status = 'SUCCESS'
        except Exception as e:
            self.status = 'FAILURE'
            self.error = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {self.id}: {e}")


class LocalCeleryApp:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Celery –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self):
        self.tasks = {}
        self.task_queue = queue.Queue()
        self.worker_thread = None
        self.running = False
        self.task_registry = {}
    
    def task(self, bind=False, max_retries=3):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á"""
        def decorator(func):
            self.task_registry[func.__name__] = func
            
            def wrapper(*args, **kwargs):
                if bind:
                    # –î–æ–±–∞–≤–ª—è–µ–º self –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
                    args = (self,) + args
                
                task = LocalTask(func, args, kwargs)
                self.tasks[task.id] = task
                self.task_queue.put(task)
                
                # –ï—Å–ª–∏ worker –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                if not self.running:
                    self.start_worker()
                
                return task
            
            return wrapper
        return decorator
    
    def start_worker(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç worker –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.running:
            return
        
        self.running = True
        self.worker_thread = threading.Thread(target=self._worker_loop, daemon=True)
        self.worker_thread.start()
        print("üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–π Celery worker –∑–∞–ø—É—â–µ–Ω")
    
    def _worker_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª worker'–∞"""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                task = self.task_queue.get(timeout=1)
                print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É: {task.func.__name__}")
                task.execute()
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task.func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            except queue.Empty:
                continue
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ worker: {e}")
    
    def stop_worker(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç worker"""
        self.running = False
        if self.worker_thread:
            self.worker_thread.join()
        print("‚èπÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π Celery worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_task_result(self, task_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏"""
        task = self.tasks.get(task_id)
        if not task:
            return {'status': 'NOT_FOUND'}
        
        return {
            'id': task.id,
            'status': task.status,
            'result': task.result,
            'error': task.error,
            'created_at': task.created_at.isoformat()
        }
    
    def get_all_tasks(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏"""
        return {task_id: self.get_task_result(task_id) for task_id in self.tasks}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Celery
local_celery_app = LocalCeleryApp()


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Celery
def task(bind=False, max_retries=3):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""
    return local_celery_app.task(bind=bind, max_retries=max_retries)


# –ò–º–∏—Ç–∞—Ü–∏—è Celery Beat –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
class LocalBeatScheduler:
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.scheduled_tasks = []
        self.running = False
        self.scheduler_thread = None
    
    def add_periodic_task(self, schedule, task_func, name=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É"""
        self.scheduled_tasks.append({
            'schedule': schedule,
            'task': task_func,
            'name': name or task_func.__name__,
            'last_run': None
        })
        print(f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: {name or task_func.__name__}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.running:
            return
        
        self.running = True
        self.scheduler_thread = threading.Thread(target=self._scheduler_loop, daemon=True)
        self.scheduler_thread.start()
        print("‚è∞ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                current_time = datetime.now()
                
                for task_info in self.scheduled_tasks:
                    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ 6:00
                    if (current_time.hour == 6 and 
                        (task_info['last_run'] is None or 
                         task_info['last_run'].date() != current_time.date())):
                        
                        print(f"‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É: {task_info['name']}")
                        task_info['task'].delay()
                        task_info['last_run'] = current_time
                
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(60)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = False
        if self.scheduler_thread:
            self.scheduler_thread.join()
        print("‚èπÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
beat_scheduler = LocalBeatScheduler()


# –ò–º–∏—Ç–∞—Ü–∏—è crontab –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class Crontab:
    """–ò–º–∏—Ç–∞—Ü–∏—è crontab –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self, hour=None, minute=None, day_of_week=None):
        self.hour = hour
        self.minute = minute
        self.day_of_week = day_of_week


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def crontab(hour=None, minute=None, day_of_week=None):
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç crontab"""
    return Crontab(hour=hour, minute=minute, day_of_week=day_of_week)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Celery
    @task
    def test_task(message):
        print(f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {message}")
        return f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {message}"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    result = test_task("–ü—Ä–∏–≤–µ—Ç, –ª–æ–∫–∞–ª—å–Ω—ã–π Celery!")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    time.sleep(2)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    task_result = local_celery_app.get_task_result(result.id)
    print(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task_result}")

#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
from datetime import datetime, date

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.config import SessionLocal, init_database
from database.models import Fighter, WeightClass, Event, Fight, FightStats


def load_test_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_database()
    
    print("üìù –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    db = SessionLocal()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        weight_classes = [
            {"name_ru": "–õ–µ–≥–∫–∏–π –≤–µ—Å", "name_en": "Lightweight", "gender": "male"},
            {"name_ru": "–ü–æ–ª—É–ª–µ–≥–∫–∏–π –≤–µ—Å", "name_en": "Featherweight", "gender": "male"},
            {"name_ru": "–¢—è–∂–µ–ª—ã–π –≤–µ—Å", "name_en": "Heavyweight", "gender": "male"},
        ]
        
        for wc_data in weight_classes:
            wc = db.query(WeightClass).filter(WeightClass.name_ru == wc_data["name_ru"]).first()
            if not wc:
                wc = WeightClass(**wc_data)
                db.add(wc)
        
        db.flush()
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        events_data = [
            {"name": "UFC 300", "date": date(2024, 4, 13), "location": "Las Vegas", "attendance": 20000},
            {"name": "UFC 299", "date": date(2024, 3, 9), "location": "Miami", "attendance": 18000},
            {"name": "UFC 298", "date": date(2024, 2, 17), "location": "Anaheim", "attendance": 16000},
        ]
        
        for event_data in events_data:
            event = db.query(Event).filter(Event.name == event_data["name"]).first()
            if not event:
                event = Event(**event_data)
                db.add(event)
        
        db.flush()
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–π—Ü–æ–≤
        fighters_data = [
            {"name_ru": "–ò—Å–ª–∞–º –ú–∞—Ö–∞—á–µ–≤", "name_en": "Islam Makhachev", "country": "–†–æ—Å—Å–∏—è", "career": "UFC"},
            {"name_ru": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–æ–ª–∫–∞–Ω–æ–≤—Å–∫–∏", "name_en": "Alexander Volkanovski", "country": "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", "career": "UFC"},
            {"name_ru": "–ú–∞–∫—Å –•–æ–ª–ª–æ–≤—ç–π", "name_en": "Max Holloway", "country": "–°–®–ê", "career": "UFC"},
            {"name_ru": "–î–∂–æ–Ω –î–∂–æ–Ω—Å", "name_en": "Jon Jones", "country": "–°–®–ê", "career": "UFC"},
            {"name_ru": "–§—Ä—ç–Ω—Å–∏—Å –ù–≥–∞–Ω–Ω—É", "name_en": "Francis Ngannou", "country": "–ö–∞–º–µ—Ä—É–Ω", "career": "UFC"},
        ]
        
        for fighter_data in fighters_data:
            fighter = db.query(Fighter).filter(Fighter.name_ru == fighter_data["name_ru"]).first()
            if not fighter:
                fighter = Fighter(**fighter_data)
                db.add(fighter)
        
        db.flush()
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–∏
        events = db.query(Event).all()
        fighters = db.query(Fighter).all()
        weight_classes = db.query(WeightClass).all()
        
        if events and fighters and weight_classes:
            fight = Fight(
                event_id=events[0].id,
                fighter1_id=fighters[0].id,
                fighter2_id=fighters[1].id,
                weight_class_id=weight_classes[0].id,
                scheduled_rounds=5,
                result="Decision",
                fight_date=events[0].date,
                is_title_fight=True,
                is_main_event=True
            )
            db.add(fight)
            db.flush()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—è
            for round_num in range(1, 6):
                for fighter in [fighters[0], fighters[1]]:
                    stats = FightStats(
                        fight_id=fight.id,
                        fighter_id=fighter.id,
                        round_number=round_num,
                        significant_strikes_landed=20 + (round_num * 5),
                        significant_strikes_attempted=30 + (round_num * 8),
                        significant_strikes_rate=65.0 + (round_num * 2),
                        total_strikes_landed=25 + (round_num * 6),
                        total_strikes_attempted=35 + (round_num * 10),
                        takedown_successful=1 if round_num % 2 == 0 else 0,
                        takedown_attempted=2 if round_num % 2 == 0 else 1,
                        takedown_rate=50.0,
                        knockdowns=1 if round_num == 3 else 0,
                        submission_attempt=0,
                        reversals=0,
                        head_landed=15 + (round_num * 3),
                        head_attempted=20 + (round_num * 5),
                        body_landed=5 + round_num,
                        body_attempted=8 + (round_num * 2),
                        leg_landed=2 + round_num,
                        leg_attempted=3 + (round_num * 2),
                        distance_landed=18 + (round_num * 4),
                        distance_attempted=25 + (round_num * 6),
                        clinch_landed=2 + round_num,
                        clinch_attempted=3 + (round_num * 2),
                        ground_landed=0,
                        ground_attempted=0,
                        result="Decision" if round_num == 5 else None,
                        last_round=(round_num == 5),
                        time=f"5:00",
                        winner="W" if fighter.id == fighters[0].id else "L"
                    )
                    db.add(stats)
        
        db.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        fighters_count = db.query(Fighter).count()
        events_count = db.query(Event).count()
        fights_count = db.query(Fight).count()
        stats_count = db.query(FightStats).count()
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ:")
        print(f"   –ë–æ–π—Ü–æ–≤: {fighters_count}")
        print(f"   –°–æ–±—ã—Ç–∏–π: {events_count}")
        print(f"   –ë–æ–µ–≤: {fights_count}")
        print(f"   –ó–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_count}")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        db.close()


if __name__ == "__main__":
    load_test_data()

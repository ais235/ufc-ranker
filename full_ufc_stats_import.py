#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ufc.stats —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º R
"""

import subprocess
import sqlite3
import os
import requests

def install_r_packages():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ R –ø–∞–∫–µ—Ç—ã"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º R –ø–∞–∫–µ—Ç—ã...")
    
    r_script = '''
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
    if (!require("devtools")) {
        install.packages("devtools")
        library(devtools)
    }
    
    if (!require("rpy2")) {
        install.packages("rpy2")
        library(rpy2)
    }
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ufc.stats
    if (!require("ufc.stats")) {
        devtools::install_github("mtoto/ufc.stats")
        library(ufc.stats)
    }
    
    print("‚úÖ R –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    '''
    
    try:
        subprocess.run(['R', '--slave', '-e', r_script], check=True)
        return True
    except:
        print("‚ö†Ô∏è R –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤")
        return False

def create_r_import_script():
    """–°–æ–∑–¥–∞–µ–º R —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìù –°–æ–∑–¥–∞–µ–º R —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞...")
    
    r_script = '''
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ ufc.stats
    library(ufc.stats)
    data("ufc_stats")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
    library(RSQLite)
    con <- dbConnect(RSQLite::SQLite(), "ufc_ranker_v2.db")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    dbExecute(con, "
        CREATE TABLE IF NOT EXISTS ufc_stats_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            fighter TEXT,
            fight_date DATE,
            weight_class TEXT,
            round_number INTEGER,
            knockdowns INTEGER,
            significant_strikes_landed INTEGER,
            significant_strikes_attempted INTEGER,
            significant_strikes_rate REAL,
            total_strikes_landed INTEGER,
            total_strikes_attempted INTEGER,
            takedown_successful INTEGER,
            takedown_attempted INTEGER,
            takedown_rate REAL,
            submission_attempt INTEGER,
            reversals INTEGER,
            head_landed INTEGER,
            head_attempted INTEGER,
            body_landed INTEGER,
            body_attempted INTEGER,
            leg_landed INTEGER,
            leg_attempted INTEGER,
            distance_landed INTEGER,
            distance_attempted INTEGER,
            clinch_landed INTEGER,
            clinch_attempted INTEGER,
            ground_landed INTEGER,
            ground_attempted INTEGER,
            winner BOOLEAN,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    dbExecute(con, "DELETE FROM ufc_stats_data")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    dbWriteTable(con, "ufc_stats_data", ufc_stats, append = TRUE)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    count <- dbGetQuery(con, "SELECT COUNT(*) as count FROM ufc_stats_data")
    print(paste("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π:", count$count))
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    dbDisconnect(con)
    
    print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    '''
    
    with open('import_ufc_stats.R', 'w', encoding='utf-8') as f:
        f.write(r_script)
    
    print("‚úÖ R —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: import_ufc_stats.R")

def run_r_import():
    """–ó–∞–ø—É—Å–∫–∞–µ–º R —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º R —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞...")
    
    try:
        result = subprocess.run(['R', '--slave', '-f', 'import_ufc_stats.R'], 
                              capture_output=True, text=True, cwd='.')
        
        if result.returncode == 0:
            print("‚úÖ R —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è R —Å–∫—Ä–∏–ø—Ç–∞:")
            print(result.stderr)
            return False
            
    except FileNotFoundError:
        print("‚ùå R –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–∏—Å—Ç–µ–º–µ")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ R —Å https://www.r-project.org/")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def create_python_import_script():
    """–°–æ–∑–¥–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –±–µ–∑ R"""
    print("üêç –°–æ–∑–¥–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞...")
    
    python_script = '''#!/usr/bin/env python3
"""
Python –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ufc.stats –±–µ–∑ R
"""

import sqlite3
import requests
import gzip
import re
import json
from datetime import datetime

def download_and_parse_ufc_stats():
    """–°–∫–∞—á–∏–≤–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ ufc.stats"""
    print("üì• –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ ufc.stats...")
    
    url = "https://github.com/mtoto/ufc.stats/raw/master/data/ufc_stats.rda"
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        
        with open('ufc_stats.rda', 'wb') as f:
            f.write(response.content)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–∞—á–∞–Ω—ã: {len(response.content):,} –±–∞–π—Ç")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        with gzip.open('ufc_stats.rda', 'rb') as f:
            data = f.read()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        fighters = re.findall(rb'[A-Za-z\\s]{10,50}', data)
        numbers = re.findall(rb'\\d+\\.\\d+', data)
        dates = re.findall(rb'\\d{4}-\\d{2}-\\d{2}', data)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(fighters)} –±–æ–π—Ü–æ–≤, {len(numbers)} —á–∏—Å–µ–ª, {len(dates)} –¥–∞—Ç")
        
        return {
            'fighters': [f.decode('utf-8', errors='ignore').strip() for f in fighters],
            'numbers': [float(n.decode()) for n in numbers],
            'dates': [d.decode() for d in dates]
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def create_ufc_stats_tables():
    """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è ufc.stats"""
    print("üèóÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
    
    conn = sqlite3.connect('ufc_ranker_v2.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±–æ–π—Ü–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ufc_stats_fighters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL,
            total_fights INTEGER DEFAULT 0,
            total_wins INTEGER DEFAULT 0,
            total_losses INTEGER DEFAULT 0,
            total_draws INTEGER DEFAULT 0,
            total_knockdowns INTEGER DEFAULT 0,
            total_significant_strikes INTEGER DEFAULT 0,
            total_takedowns INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ufc_stats_rounds (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            fighter_id INTEGER,
            round_number INTEGER,
            knockdowns INTEGER DEFAULT 0,
            significant_strikes_landed INTEGER DEFAULT 0,
            significant_strikes_attempted INTEGER DEFAULT 0,
            significant_strikes_rate REAL DEFAULT 0,
            total_strikes_landed INTEGER DEFAULT 0,
            total_strikes_attempted INTEGER DEFAULT 0,
            takedown_successful INTEGER DEFAULT 0,
            takedown_attempted INTEGER DEFAULT 0,
            takedown_rate REAL DEFAULT 0,
            submission_attempt INTEGER DEFAULT 0,
            reversals INTEGER DEFAULT 0,
            head_landed INTEGER DEFAULT 0,
            head_attempted INTEGER DEFAULT 0,
            body_landed INTEGER DEFAULT 0,
            body_attempted INTEGER DEFAULT 0,
            leg_landed INTEGER DEFAULT 0,
            leg_attempted INTEGER DEFAULT 0,
            distance_landed INTEGER DEFAULT 0,
            distance_attempted INTEGER DEFAULT 0,
            clinch_landed INTEGER DEFAULT 0,
            clinch_attempted INTEGER DEFAULT 0,
            ground_landed INTEGER DEFAULT 0,
            ground_attempted INTEGER DEFAULT 0,
            winner BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (fighter_id) REFERENCES ufc_stats_fighters(id)
        )
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

def import_fighters(fighters_data):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ–π—Ü–æ–≤"""
    print("üëä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ–π—Ü–æ–≤...")
    
    conn = sqlite3.connect('ufc_ranker_v2.db')
    cursor = conn.cursor()
    
    imported_count = 0
    
    for fighter_name in fighters_data:
        if len(fighter_name) > 5 and not any(x in fighter_name.lower() for x in ['vs', 'bout', 'title', 'tournament', 'ufc', 'fight']):
            try:
                cursor.execute('''
                    INSERT OR IGNORE INTO ufc_stats_fighters (name) 
                    VALUES (?)
                ''', (fighter_name,))
                imported_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–æ–π—Ü–∞ {fighter_name}: {e}")
    
    conn.commit()
    conn.close()
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –±–æ–π—Ü–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü•ä –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ UFC.STATS")
    print("=" * 50)
    
    # 1. –°–∫–∞—á–∏–≤–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    data = download_and_parse_ufc_stats()
    if not data:
        return
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_ufc_stats_tables()
    
    # 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ–π—Ü–æ–≤
    import_fighters(data['fighters'])
    
    print("\\n‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ë–î: python view_database.py")

if __name__ == "__main__":
    main()
'''
    
    with open('python_ufc_stats_import.py', 'w', encoding='utf-8') as f:
        f.write(python_script)
    
    print("‚úÖ Python —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: python_ufc_stats_import.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü•ä –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ UFC.STATS")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ R
    try:
        subprocess.run(['R', '--version'], capture_output=True, check=True)
        print("‚úÖ R –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º R —Å–∫—Ä–∏–ø—Ç...")
        create_r_import_script()
        
        if run_r_import():
            print("‚úÖ –ò–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ R –∑–∞–≤–µ—Ä—à–µ–Ω!")
        else:
            print("‚ö†Ô∏è R –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º Python –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É...")
            create_python_import_script()
            print("üìã –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python python_ufc_stats_import.py")
            
    except FileNotFoundError:
        print("‚ö†Ô∏è R –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º Python –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É...")
        create_python_import_script()
        print("üìã –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python python_ufc_stats_import.py")

if __name__ == "__main__":
    main()

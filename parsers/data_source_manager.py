#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
"""

from typing import Dict, List, Optional, Any
from enum import Enum
from datetime import datetime
from .ufc_official_api import UFCOfficialAPIParser
from .ufc_stats_enhanced import UFCStatsEnhanced
from .ufc_rankings import UFCRankingsParser
from .fighter_profiles import FighterProfilesParser
from .upcoming_cards import UpcomingCardsParser
from database.config import SessionLocal
from database.models import Fighter, WeightClass, Ranking, Event, Fight, FightStats


class DataSourcePriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    HIGH = 1      # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    MEDIUM = 2    # –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    LOW = 3       # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏


class DataSourceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.sources = {
            'ufc_official': {
                'parser': UFCOfficialAPIParser(),
                'priority': DataSourcePriority.HIGH,
                'enabled': True,
                'last_update': None,
                'success_rate': 0.0
            },
            'ufc_stats': {
                'parser': UFCStatsEnhanced(),
                'priority': DataSourcePriority.HIGH,
                'enabled': True,
                'last_update': None,
                'success_rate': 0.0
            },
            'fight_ru_rankings': {
                'parser': UFCRankingsParser(),
                'priority': DataSourcePriority.MEDIUM,
                'enabled': True,
                'last_update': None,
                'success_rate': 0.0
            },
            'fight_ru_profiles': {
                'parser': FighterProfilesParser(),
                'priority': DataSourcePriority.MEDIUM,
                'enabled': True,
                'last_update': None,
                'success_rate': 0.0
            },
            'fight_ru_cards': {
                'parser': UpcomingCardsParser(),
                'priority': DataSourcePriority.MEDIUM,
                'enabled': True,
                'last_update': None,
                'success_rate': 0.0
            }
        }
    
    def get_rankings(self, force_refresh: bool = False) -> Dict[str, List[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        ranking_sources = [
            (name, config) for name, config in self.sources.items()
            if config['enabled'] and hasattr(config['parser'], 'get_rankings')
        ]
        ranking_sources.sort(key=lambda x: x[1]['priority'].value)
        
        for source_name, config in ranking_sources:
            try:
                print(f"  üîÑ –ü—Ä–æ–±—É–µ–º {source_name}...")
                
                if hasattr(config['parser'], 'get_rankings'):
                    rankings = config['parser'].get_rankings()
                else:
                    rankings = config['parser'].parse()
                
                if rankings and len(rankings) > 0:
                    print(f"  ‚úÖ {source_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(rankings)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                    self._update_source_stats(source_name, True)
                    return rankings
                else:
                    print(f"  ‚ö†Ô∏è {source_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    self._update_source_stats(source_name, False)
                    
            except Exception as e:
                print(f"  ‚ùå {source_name}: –æ—à–∏–±–∫–∞ - {e}")
                self._update_source_stats(source_name, False)
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        return {}
    
    def get_fighters(self, force_refresh: bool = False) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–æ–π—Ü–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–π—Ü–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        fighter_sources = [
            (name, config) for name, config in self.sources.items()
            if config['enabled'] and hasattr(config['parser'], 'get_fighters')
        ]
        fighter_sources.sort(key=lambda x: x[1]['priority'].value)
        
        for source_name, config in fighter_sources:
            try:
                print(f"  üîÑ –ü—Ä–æ–±—É–µ–º {source_name}...")
                
                if hasattr(config['parser'], 'get_fighters'):
                    fighters = config['parser'].get_fighters()
                else:
                    # –î–ª—è –ø–∞—Ä—Å–µ—Ä–æ–≤ –±–µ–∑ get_fighters, –ø—Ä–æ–±—É–µ–º parse
                    data = config['parser'].parse()
                    fighters = data.get('fighters', []) if isinstance(data, dict) else []
                
                if fighters and len(fighters) > 0:
                    print(f"  ‚úÖ {source_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(fighters)} –±–æ–π—Ü–æ–≤")
                    self._update_source_stats(source_name, True)
                    return fighters
                else:
                    print(f"  ‚ö†Ô∏è {source_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    self._update_source_stats(source_name, False)
                    
            except Exception as e:
                print(f"  ‚ùå {source_name}: –æ—à–∏–±–∫–∞ - {e}")
                self._update_source_stats(source_name, False)
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–π—Ü–æ–≤ –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        return []
    
    def get_events(self, force_refresh: bool = False) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("üé™ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        event_sources = [
            (name, config) for name, config in self.sources.items()
            if config['enabled'] and hasattr(config['parser'], 'get_events')
        ]
        event_sources.sort(key=lambda x: x[1]['priority'].value)
        
        for source_name, config in event_sources:
            try:
                print(f"  üîÑ –ü—Ä–æ–±—É–µ–º {source_name}...")
                
                if hasattr(config['parser'], 'get_events'):
                    events = config['parser'].get_events()
                else:
                    # –î–ª—è –ø–∞—Ä—Å–µ—Ä–æ–≤ –±–µ–∑ get_events, –ø—Ä–æ–±—É–µ–º parse
                    data = config['parser'].parse()
                    events = data.get('events', []) if isinstance(data, dict) else []
                
                if events and len(events) > 0:
                    print(f"  ‚úÖ {source_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
                    self._update_source_stats(source_name, True)
                    return events
                else:
                    print(f"  ‚ö†Ô∏è {source_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    self._update_source_stats(source_name, False)
                    
            except Exception as e:
                print(f"  ‚ùå {source_name}: –æ—à–∏–±–∫–∞ - {e}")
                self._update_source_stats(source_name, False)
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        return []
    
    def get_fight_stats(self, force_refresh: bool = False) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–µ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–µ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        stats_sources = [
            (name, config) for name, config in self.sources.items()
            if config['enabled'] and 'stats' in name.lower()
        ]
        stats_sources.sort(key=lambda x: x[1]['priority'].value)
        
        for source_name, config in stats_sources:
            try:
                print(f"  üîÑ –ü—Ä–æ–±—É–µ–º {source_name}...")
                
                data = config['parser'].parse()
                fight_stats = data.get('fight_stats', []) if isinstance(data, dict) else []
                
                if fight_stats and len(fight_stats) > 0:
                    print(f"  ‚úÖ {source_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(fight_stats)} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                    self._update_source_stats(source_name, True)
                    return fight_stats
                else:
                    print(f"  ‚ö†Ô∏è {source_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    self._update_source_stats(source_name, False)
                    
            except Exception as e:
                print(f"  ‚ùå {source_name}: –æ—à–∏–±–∫–∞ - {e}")
                self._update_source_stats(source_name, False)
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–µ–≤ –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        return []
    
    def update_all_data(self, force_refresh: bool = False) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        results = {
            'rankings': self.get_rankings(force_refresh),
            'fighters': self.get_fighters(force_refresh),
            'events': self.get_events(force_refresh),
            'fight_stats': self.get_fight_stats(force_refresh),
            'sources_status': self.get_sources_status()
        }
        
        return results
    
    def _update_source_stats(self, source_name: str, success: bool) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if source_name in self.sources:
            self.sources[source_name]['last_update'] = datetime.now()
            
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ success_rate
            current_rate = self.sources[source_name]['success_rate']
            if success:
                new_rate = min(1.0, current_rate + 0.1)
            else:
                new_rate = max(0.0, current_rate - 0.05)
            
            self.sources[source_name]['success_rate'] = new_rate
    
    def get_sources_status(self) -> Dict[str, Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        status = {}
        for name, config in self.sources.items():
            status[name] = {
                'enabled': config['enabled'],
                'priority': config['priority'].name,
                'last_update': config['last_update'].isoformat() if config['last_update'] else None,
                'success_rate': config['success_rate']
            }
        return status
    
    def enable_source(self, source_name: str) -> bool:
        """–í–∫–ª—é—á–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö"""
        if source_name in self.sources:
            self.sources[source_name]['enabled'] = True
            print(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ {source_name} –≤–∫–ª—é—á–µ–Ω")
            return True
        else:
            print(f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ {source_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def disable_source(self, source_name: str) -> bool:
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö"""
        if source_name in self.sources:
            self.sources[source_name]['enabled'] = False
            print(f"‚è∏Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ {source_name} –æ—Ç–∫–ª—é—á–µ–Ω")
            return True
        else:
            print(f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ {source_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def set_source_priority(self, source_name: str, priority: DataSourcePriority) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if source_name in self.sources:
            self.sources[source_name]['priority'] = priority
            print(f"üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {priority.name}")
            return True
        else:
            print(f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ {source_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def get_recommended_sources(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ success_rate –∏ priority
        sorted_sources = sorted(
            self.sources.items(),
            key=lambda x: (x[1]['success_rate'], -x[1]['priority'].value),
            reverse=True
        )
        
        return [name for name, config in sorted_sources if config['enabled']]
    
    def validate_data_quality(self, data: Dict[str, Any]) -> Dict[str, float]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"""
        quality_scores = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
        if 'rankings' in data and data['rankings']:
            rankings = data['rankings']
            total_categories = len(rankings)
            categories_with_fighters = sum(1 for cat in rankings.values() if len(cat) > 0)
            quality_scores['rankings'] = (categories_with_fighters / total_categories) * 100 if total_categories > 0 else 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–π—Ü–æ–≤
        if 'fighters' in data and data['fighters']:
            fighters = data['fighters']
            fighters_with_complete_data = sum(1 for f in fighters if f.get('name') and f.get('country'))
            quality_scores['fighters'] = (fighters_with_complete_data / len(fighters)) * 100 if fighters else 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
        if 'events' in data and data['events']:
            events = data['events']
            events_with_complete_data = sum(1 for e in events if e.get('name') and e.get('date'))
            quality_scores['events'] = (events_with_complete_data / len(events)) * 100 if events else 0
        
        return quality_scores


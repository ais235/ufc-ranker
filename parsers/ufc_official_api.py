#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ UFC API
"""

import requests
import json
from typing import Dict, List, Optional
from datetime import datetime
from .base_parser import BaseParser
from database.models import Fighter, WeightClass, Ranking, Event, Fight
from database.config import SessionLocal


class UFCOfficialAPIParser(BaseParser):
    """–ü–∞—Ä—Å–µ—Ä –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ UFC API"""
    
    def __init__(self, cache_dir: str = ".cache/ufc_official"):
        super().__init__(cache_dir)
        self.base_url = "https://d29m7x9x9j2pb9.cloudfront.net"
        self.api_endpoints = {
            'rankings': '/rankings',
            'fighters': '/fighters',
            'events': '/events',
            'fights': '/fights'
        }
    
    def get_rankings(self) -> Dict[str, List[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API"""
        print("ü•ä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ UFC API...")
        
        try:
            response = requests.get(f"{self.base_url}{self.api_endpoints['rankings']}", timeout=30)
            if response.status_code == 200:
                data = response.json()
                return self._parse_rankings_data(data)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}")
            return {}
    
    def get_fighters(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ–π—Ü–æ–≤ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API"""
        print("üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–π—Ü–æ–≤ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ UFC API...")
        
        try:
            response = requests.get(f"{self.base_url}{self.api_endpoints['fighters']}", timeout=30)
            if response.status_code == 200:
                data = response.json()
                return self._parse_fighters_data(data)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–π—Ü–æ–≤: {e}")
            return []
    
    def get_events(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API"""
        print("üé™ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ UFC API...")
        
        try:
            response = requests.get(f"{self.base_url}{self.api_endpoints['events']}", timeout=30)
            if response.status_code == 200:
                data = response.json()
                return self._parse_events_data(data)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return []
    
    def _parse_rankings_data(self, data: Dict) -> Dict[str, List[Dict]]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        categories = {}
        
        for division in data.get('divisions', []):
            division_name = division.get('name', '')
            fighters = []
            
            for fighter_data in division.get('fighters', []):
                fighter = {
                    'name': fighter_data.get('name', ''),
                    'rank': fighter_data.get('rank', 0),
                    'is_champion': fighter_data.get('isChampion', False),
                    'weight_class': division_name,
                    'country': fighter_data.get('country', ''),
                    'image_url': fighter_data.get('imageUrl', ''),
                    'profile_url': fighter_data.get('profileUrl', '')
                }
                fighters.append(fighter)
            
            if fighters:
                categories[division_name] = fighters
        
        return categories
    
    def _parse_fighters_data(self, data: Dict) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –±–æ–π—Ü–æ–≤"""
        fighters = []
        
        for fighter_data in data.get('fighters', []):
            fighter = {
                'name': fighter_data.get('name', ''),
                'nickname': fighter_data.get('nickname', ''),
                'country': fighter_data.get('country', ''),
                'image_url': fighter_data.get('imageUrl', ''),
                'height': fighter_data.get('height', 0),
                'weight': fighter_data.get('weight', 0),
                'reach': fighter_data.get('reach', 0),
                'age': fighter_data.get('age', 0),
                'wins': fighter_data.get('wins', 0),
                'losses': fighter_data.get('losses', 0),
                'draws': fighter_data.get('draws', 0),
                'weight_class': fighter_data.get('weightClass', ''),
                'profile_url': fighter_data.get('profileUrl', '')
            }
            fighters.append(fighter)
        
        return fighters
    
    def _parse_events_data(self, data: Dict) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π"""
        events = []
        
        for event_data in data.get('events', []):
            event = {
                'name': event_data.get('name', ''),
                'date': event_data.get('date', ''),
                'location': event_data.get('location', ''),
                'venue': event_data.get('venue', ''),
                'image_url': event_data.get('imageUrl', ''),
                'is_upcoming': event_data.get('isUpcoming', True),
                'attendance': event_data.get('attendance', 0)
            }
            events.append(event)
        
        return events
    
    def save_to_database(self, data: Dict) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        db = SessionLocal()
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
            if 'rankings' in data:
                self._save_rankings(db, data['rankings'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–π—Ü–æ–≤
            if 'fighters' in data:
                self._save_fighters(db, data['fighters'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è
            if 'events' in data:
                self._save_events(db, data['events'])
            
            db.commit()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            
        except Exception as e:
            db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        finally:
            db.close()
    
    def _save_rankings(self, db, rankings: Dict[str, List[Dict]]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏"""
        for category_name, fighters in rankings.items():
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≤–µ—Å–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            weight_class = db.query(WeightClass).filter(
                WeightClass.name_en == category_name
            ).first()
            
            if not weight_class:
                weight_class = WeightClass(
                    name_en=category_name,
                    name_ru=self._translate_category_name(category_name),
                    gender=self._detect_gender(category_name)
                )
                db.add(weight_class)
                db.flush()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–π—Ü–æ–≤ –∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∏
            for fighter_data in fighters:
                fighter = self._get_or_create_fighter(db, fighter_data)
                
                ranking = Ranking(
                    fighter_id=fighter.id,
                    weight_class_id=weight_class.id,
                    rank_position=fighter_data.get('rank'),
                    is_champion=fighter_data.get('is_champion', False)
                )
                db.add(ranking)
    
    def _save_fighters(self, db, fighters: List[Dict]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–æ–π—Ü–æ–≤"""
        for fighter_data in fighters:
            self._get_or_create_fighter(db, fighter_data)
    
    def _save_events(self, db, events: List[Dict]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è"""
        for event_data in events:
            event = Event(
                name=event_data.get('name', ''),
                date=datetime.strptime(event_data.get('date', ''), '%Y-%m-%d').date() if event_data.get('date') else None,
                location=event_data.get('location', ''),
                venue=event_data.get('venue', ''),
                image_url=event_data.get('image_url', ''),
                is_upcoming=event_data.get('is_upcoming', True),
                attendance=event_data.get('attendance', 0)
            )
            db.add(event)
    
    def _get_or_create_fighter(self, db, fighter_data: Dict) -> Fighter:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–π—Ü–∞"""
        fighter = db.query(Fighter).filter(
            Fighter.name_en == fighter_data.get('name', '')
        ).first()
        
        if not fighter:
            fighter = Fighter(
                name_en=fighter_data.get('name', ''),
                name_ru=fighter_data.get('name', ''),  # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –∏–º—è
                nickname=fighter_data.get('nickname', ''),
                country=fighter_data.get('country', ''),
                image_url=fighter_data.get('image_url', ''),
                height=fighter_data.get('height', 0),
                weight=fighter_data.get('weight', 0),
                reach=fighter_data.get('reach', 0),
                age=fighter_data.get('age', 0),
                win=fighter_data.get('wins', 0),
                lose=fighter_data.get('losses', 0),
                draw=fighter_data.get('draws', 0),
                weight_class=fighter_data.get('weight_class', ''),
                profile_url=fighter_data.get('profile_url', ''),
                career="UFC"
            )
            db.add(fighter)
            db.flush()
        
        return fighter
    
    def _translate_category_name(self, name_en: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
        translations = {
            'Flyweight': '–ù–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å',
            'Bantamweight': '–õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å',
            'Featherweight': '–ü–æ–ª—É–ª–µ–≥–∫–∏–π –≤–µ—Å',
            'Lightweight': '–õ–µ–≥–∫–∏–π –≤–µ—Å',
            'Welterweight': '–ü–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å',
            'Middleweight': '–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å',
            'Light Heavyweight': '–ü–æ–ª—É—Ç—è–∂—ë–ª—ã–π –≤–µ—Å',
            'Heavyweight': '–¢—è–∂–µ–ª—ã–π –≤–µ—Å',
            "Women's Flyweight": '–ñ–µ–Ω—Å–∫–∏–π –Ω–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å',
            "Women's Bantamweight": '–ñ–µ–Ω—Å–∫–∏–π –ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å',
            "Women's Strawweight": '–ñ–µ–Ω—Å–∫–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å',
            'Pound for Pound': 'Pound for Pound'
        }
        return translations.get(name_en, name_en)
    
    def _detect_gender(self, category_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if "Women's" in category_name:
            return 'female'
        return 'male'
    
    def parse(self, use_cache: bool = True) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("ü•ä –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ UFC API...")
        
        data = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
        rankings = self.get_rankings()
        if rankings:
            data['rankings'] = rankings
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–π—Ü–æ–≤
        fighters = self.get_fighters()
        if fighters:
            data['fighters'] = fighters
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        events = self.get_events()
        if events:
            data['events'] = events
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if data:
            self.save_to_database(data)
        
        return data


#!/usr/bin/env python3
"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UFC API –æ—Ç FritzCapuyan —Å –Ω–∞—à–µ–π –ë–î
"""

import sys
import os
from typing import Dict, List, Optional
from datetime import datetime, date
import re

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from ufc import get_fighter, get_event
    UFC_API_AVAILABLE = True
except ImportError:
    UFC_API_AVAILABLE = False
    print("‚ö†Ô∏è UFC API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ufc_api")

from database.models import Fighter, WeightClass, Event, Fight, FightRecord, Ranking
from database.config import SessionLocal


class UFCAPIAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UFC API —Å –Ω–∞—à–µ–π –ë–î"""
    
    def __init__(self):
        if not UFC_API_AVAILABLE:
            raise ImportError("UFC API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ufc_api")
        
        self.db = SessionLocal()
        self.weight_class_mapping = {
            'Heavyweight': '–¢—è–∂–µ–ª—ã–π –≤–µ—Å',
            'Light Heavyweight': '–ü–æ–ª—É—Ç—è–∂–µ–ª—ã–π –≤–µ—Å', 
            'Middleweight': '–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å',
            'Welterweight': '–ü–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å',
            'Lightweight': '–õ–µ–≥–∫–∏–π –≤–µ—Å',
            'Featherweight': '–ü–æ–ª—É–ª–µ–≥–∫–∏–π –≤–µ—Å',
            'Bantamweight': '–õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å',
            'Flyweight': '–ù–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å',
            'Women\'s Strawweight': '–ñ–µ–Ω—Å–∫–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å',
            'Women\'s Flyweight': '–ñ–µ–Ω—Å–∫–∏–π –Ω–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å',
            'Women\'s Bantamweight': '–ñ–µ–Ω—Å–∫–∏–π –ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å',
            'Women\'s Featherweight': '–ñ–µ–Ω—Å–∫–∏–π –ø–æ–ª—É–ª–µ–≥–∫–∏–π –≤–µ—Å'
        }
    
    def convert_height_to_cm(self, height_str: str) -> Optional[int]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–æ—Å—Ç –∏–∑ —Ñ—É—Ç–æ–≤ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã"""
        if not height_str or height_str == '--':
            return None
        
        # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "6'4""
        match = re.match(r"(\d+)'(\d+)\"", height_str)
        if match:
            feet = int(match.group(1))
            inches = int(match.group(2))
            total_inches = feet * 12 + inches
            return int(total_inches * 2.54)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–º
        
        return None
    
    def convert_weight_to_kg(self, weight_str: str) -> Optional[int]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–µ—Å –∏–∑ —Ñ—É–Ω—Ç–æ–≤ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã"""
        if not weight_str or weight_str == '--':
            return None
        
        # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "248 lbs"
        match = re.match(r"(\d+)\s*lbs?", weight_str)
        if match:
            pounds = int(match.group(1))
            return int(pounds * 0.453592)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–≥
        
        return None
    
    def parse_birth_date(self, birthdate_str: str) -> Optional[date]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not birthdate_str or birthdate_str == '--':
            return None
        
        try:
            # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "Jul 19, 1987"
            return datetime.strptime(birthdate_str, "%b %d, %Y").date()
        except:
            return None
    
    def get_or_create_weight_class(self, weight_class_en: str) -> WeightClass:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –≤–µ—Å–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        weight_class_ru = self.weight_class_mapping.get(weight_class_en, weight_class_en)
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        existing = self.db.query(WeightClass).filter(
            WeightClass.name_en == weight_class_en
        ).first()
        
        if existing:
            return existing
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        weight_class = WeightClass(
            name_en=weight_class_en,
            name_ru=weight_class_ru,
            gender='male'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        )
        self.db.add(weight_class)
        self.db.flush()
        return weight_class
    
    def import_fighter(self, fighter_name: str) -> Optional[Fighter]:
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–æ–π—Ü–∞ –∏–∑ UFC API"""
        print(f"ü•ä –ò–º–ø–æ—Ä—Ç –±–æ–π—Ü–∞: {fighter_name}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UFC API
            fighter_data = get_fighter(fighter_name)
            
            if not fighter_data:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {fighter_name}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±–æ–µ—Ü
            existing = self.db.query(Fighter).filter(
                Fighter.name_en == fighter_data['name']
            ).first()
            
            if existing:
                print(f"‚úÖ –ë–æ–µ—Ü {fighter_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return existing
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ–π—Ü–∞
            fighter = Fighter(
                name_en=fighter_data['name'],
                name_ru=fighter_data['name'],  # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è
                nickname=fighter_data.get('nickname', ''),
                country=fighter_data.get('nationality', ''),
                height=self.convert_height_to_cm(fighter_data.get('height', '')),
                weight=self.convert_weight_to_kg(fighter_data.get('weight', '')),
                age=int(fighter_data.get('age', 0)) if fighter_data.get('age', '').isdigit() else None,
                birth_date=self.parse_birth_date(fighter_data.get('birthdate', '')),
                weight_class=fighter_data.get('weight_class', ''),
                career='UFC',
                win=int(fighter_data.get('wins', {}).get('total', 0)),
                lose=int(fighter_data.get('losses', {}).get('total', 0)),
                draw=0  # UFC API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∏—á—å–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            )
            
            self.db.add(fighter)
            self.db.flush()
            
            # –°–æ–∑–¥–∞–µ–º –±–æ–µ–≤–æ–π —Ä–µ–∫–æ—Ä–¥
            fight_record = FightRecord(
                fighter_id=fighter.id,
                wins=fighter.win,
                losses=fighter.lose,
                draws=fighter.draw
            )
            self.db.add(fight_record)
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ—Å–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if fighter_data.get('weight_class'):
                weight_class = self.get_or_create_weight_class(fighter_data['weight_class'])
            
            print(f"‚úÖ –ë–æ–µ—Ü {fighter_name} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            return fighter
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {fighter_name}: {e}")
            return None
    
    def import_top_fighters(self, count: int = 50) -> List[Fighter]:
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø –±–æ–π—Ü–æ–≤ UFC"""
        print(f"ü•ä –ò–º–ø–æ—Ä—Ç —Ç–æ–ø-{count} –±–æ–π—Ü–æ–≤ UFC...")
        
        # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–æ–ø –±–æ–π—Ü–æ–≤ UFC
        top_fighters = [
            'Jon Jones', 'Islam Makhachev', 'Alexander Volkanovski', 'Leon Edwards',
            'Kamaru Usman', 'Charles Oliveira', 'Dustin Poirier', 'Justin Gaethje',
            'Max Holloway', 'Yair Rodriguez', 'Aljamain Sterling', 'Petr Yan',
            'Sean O\'Malley', 'Brandon Moreno', 'Deiveson Figueiredo', 'Amanda Nunes',
            'Valentina Shevchenko', 'Rose Namajunas', 'Zhang Weili', 'Carla Esparza',
            'Conor McGregor', 'Khabib Nurmagomedov', 'Daniel Cormier', 'Stipe Miocic',
            'Francis Ngannou', 'Ciryl Gane', 'Derrick Lewis', 'Curtis Blaydes',
            'Jared Cannonier', 'Robert Whittaker', 'Israel Adesanya', 'Paulo Costa',
            'Colby Covington', 'Jorge Masvidal', 'Nate Diaz', 'Tony Ferguson',
            'Beneil Dariush', 'Rafael dos Anjos', 'Michael Chandler', 'Dan Hooker',
            'Calvin Kattar', 'Josh Emmett', 'Arnold Allen', 'Ilia Topuria',
            'Cory Sandhagen', 'Marlon Vera', 'Rob Font', 'Song Yadong',
            'Kai Kara-France', 'Askar Askarov', 'Alexandre Pantoja', 'Brandon Royval'
        ]
        
        imported_fighters = []
        
        for i, fighter_name in enumerate(top_fighters[:count], 1):
            print(f"\n[{i}/{count}] –ò–º–ø–æ—Ä—Ç: {fighter_name}")
            fighter = self.import_fighter(fighter_name)
            if fighter:
                imported_fighters.append(fighter)
        
        self.db.commit()
        print(f"\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(imported_fighters)} –±–æ–π—Ü–æ–≤")
        return imported_fighters
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
        self.db.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not UFC_API_AVAILABLE:
        print("‚ùå UFC API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ufc_api")
        return
    
    adapter = UFCAPIAdapter()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ –±–æ–π—Ü–∞
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –æ–¥–Ω–æ–≥–æ –±–æ–π—Ü–∞...")
        test_fighter = adapter.import_fighter('Jon Jones')
        
        if test_fighter:
            print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –º–∞—Å—Å–æ–≤–æ–º –∏–º–ø–æ—Ä—Ç–µ
            response = input("\nü§î –•–æ—Ç–∏—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø-20 –±–æ–π—Ü–æ–≤? (y/n): ")
            if response.lower() == 'y':
                adapter.import_top_fighters(20)
        else:
            print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        adapter.close()


if __name__ == "__main__":
    main()







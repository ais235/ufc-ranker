#!/usr/bin/env python3
"""
–ò–º–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö ufc.stats –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–µ–≤ UFC
"""

import requests
import pandas as pd
import json
from typing import Dict, List, Optional
from datetime import datetime, date
from database.models import Fighter, WeightClass, Event, Fight, FightStats
from database.config import SessionLocal
from .base_parser import BaseParser


class UFCStatsImporter(BaseParser):
    """–ò–º–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö ufc.stats"""
    
    def __init__(self, cache_dir: str = ".cache/ufc_stats"):
        super().__init__(cache_dir)
        # URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ufc.stats (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        self.data_url = "https://raw.githubusercontent.com/mtoto/ufc.stats/master/data/ufc_stats.rda"
        self.csv_url = "https://raw.githubusercontent.com/mtoto/ufc.stats/master/data/ufc_stats.csv"
        
    def download_ufc_stats_data(self) -> Optional[pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ ufc.stats"""
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ufc.stats...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV –≤–µ—Ä—Å–∏—é
            response = requests.get(self.csv_url, timeout=30)
            if response.status_code == 200:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_file = self.cache_dir / "ufc_stats.csv"
                temp_file.parent.mkdir(parents=True, exist_ok=True)
                
                with open(temp_file, 'w', encoding='utf-8') as f:
                    f.write(response.text)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ pandas
                df = pd.read_csv(temp_file)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ ufc.stats")
                return df
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return self._create_sample_data()
    
    def _create_sample_data(self) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        sample_data = []
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ–π—Ü–æ–≤
        fighters = [
            "–ò—Å–ª–∞–º –ú–∞—Ö–∞—á–µ–≤", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–æ–ª–∫–∞–Ω–æ–≤—Å–∫–∏", "–ú–∞–∫—Å –•–æ–ª–ª–æ–≤—ç–π", 
            "–î–∂–æ–Ω –î–∂–æ–Ω—Å", "–§—Ä—ç–Ω—Å–∏—Å –ù–≥–∞–Ω–Ω—É", "–ö–æ–Ω–æ—Ä –ú–∞–∫–ì—Ä–µ–≥–æ—Ä"
        ]
        
        events = [
            "UFC 284", "UFC 285", "UFC 286", "UFC 287", "UFC 288"
        ]
        
        weight_classes = [
            "–õ–µ–≥–∫–∏–π –≤–µ—Å", "–ü–æ–ª—É–ª–µ–≥–∫–∏–π –≤–µ—Å", "–¢—è–∂–µ–ª—ã–π –≤–µ—Å", "–ü–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å"
        ]
        
        results = ["KO/TKO", "Decision", "Submission", "No Contest"]
        
        for i in range(100):  # 100 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            fighter = fighters[i % len(fighters)]
            event = events[i % len(events)]
            weight_class = weight_classes[i % len(weight_classes)]
            result = results[i % len(results)]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            significant_strikes_landed = max(0, int(50 + (i * 2.5) % 100))
            significant_strikes_attempted = significant_strikes_landed + int(20 + (i * 1.5) % 50)
            
            sample_data.append({
                'fighter': fighter,
                'knockdowns': i % 3,
                'significant_strikes_landed': significant_strikes_landed,
                'significant_strikes_attempted': significant_strikes_attempted,
                'significant_strikes_rate': round((significant_strikes_landed / significant_strikes_attempted) * 100, 2) if significant_strikes_attempted > 0 else 0,
                'total_strikes_landed': significant_strikes_landed + int(10 + (i * 0.5) % 20),
                'total_strikes_attempted': significant_strikes_attempted + int(15 + (i * 0.8) % 30),
                'takedown_successful': i % 5,
                'takedown_attempted': (i % 5) + int(2 + (i * 0.3) % 5),
                'takedown_rate': round(((i % 5) / ((i % 5) + int(2 + (i * 0.3) % 5))) * 100, 2) if (i % 5) + int(2 + (i * 0.3) % 5) > 0 else 0,
                'submission_attempt': i % 2,
                'reversals': i % 3,
                'head_landed': int(significant_strikes_landed * 0.6),
                'head_attempted': int(significant_strikes_attempted * 0.6),
                'body_landed': int(significant_strikes_landed * 0.3),
                'body_attempted': int(significant_strikes_attempted * 0.3),
                'leg_landed': int(significant_strikes_landed * 0.1),
                'leg_attempted': int(significant_strikes_attempted * 0.1),
                'distance_landed': int(significant_strikes_landed * 0.7),
                'distance_attempted': int(significant_strikes_attempted * 0.7),
                'clinch_landed': int(significant_strikes_landed * 0.2),
                'clinch_attempted': int(significant_strikes_attempted * 0.2),
                'ground_landed': int(significant_strikes_landed * 0.1),
                'ground_attempted': int(significant_strikes_attempted * 0.1),
                'round': (i % 5) + 1,
                'result': result,
                'last_round': (i % 5) == 4,
                'time': f"{4 + (i % 2)}:{(i * 7) % 60:02d}",
                'scheduled_rounds': 5 if i % 10 == 0 else 3,
                'winner': 'W' if i % 2 == 0 else 'L',
                'weight_class': weight_class,
                'event': event,
                'fight_date': f"2023-{(i % 12) + 1:02d}-{(i % 28) + 1:02d}",
                'location': f"City {i % 10}",
                'attendance': 15000 + (i * 100) % 5000,
                'id': i + 1
            })
        
        df = pd.DataFrame(sample_data)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return df
    
    def import_to_database(self, df: pd.DataFrame) -> None:
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        print("üíæ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        db = SessionLocal()
        try:
            imported_fights = 0
            imported_stats = 0
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –±–æ—è–º
            fight_groups = df.groupby(['event', 'fight_date', 'weight_class'])
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –±–æ–µ–≤: {len(fight_groups)}")
            
            for (event_name, fight_date, weight_class_name), fight_data in fight_groups:
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                event = db.query(Event).filter(Event.name == event_name).first()
                if not event:
                    event = Event(
                        name=event_name,
                        date=datetime.strptime(fight_date, "%Y-%m-%d").date(),
                        location=fight_data['location'].iloc[0],
                        attendance=int(fight_data['attendance'].iloc[0]),
                        is_upcoming=False
                    )
                    db.add(event)
                    db.flush()
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≤–µ—Å–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                weight_class = db.query(WeightClass).filter(
                    WeightClass.name_ru == weight_class_name
                ).first()
                if not weight_class:
                    weight_class = WeightClass(
                        name_ru=weight_class_name,
                        name_en=self._translate_weight_class(weight_class_name),
                        gender='male'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º—É–∂—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    )
                    db.add(weight_class)
                    db.flush()
                
                # –ü–æ–ª—É—á–∞–µ–º –±–æ–π—Ü–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                fighters_in_fight = fight_data['fighter'].unique()
                if len(fighters_in_fight) >= 2:
                    fighter1_name = fighters_in_fight[0]
                    fighter2_name = fighters_in_fight[1]
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –±–æ–π—Ü–æ–≤
                    fighter1 = self._get_or_create_fighter(db, fighter1_name)
                    fighter2 = self._get_or_create_fighter(db, fighter2_name)
                    
                    # –°–æ–∑–¥–∞–µ–º –±–æ–π
                    fight = Fight(
                        event_id=event.id,
                        fighter1_id=fighter1.id,
                        fighter2_id=fighter2.id,
                        weight_class_id=weight_class.id,
                        scheduled_rounds=int(fight_data['scheduled_rounds'].iloc[0]),
                        result=fight_data['result'].iloc[0],
                        fight_date=datetime.strptime(fight_date, "%Y-%m-%d").date(),
                        is_title_fight=False,
                        is_main_event=False
                    )
                    db.add(fight)
                    db.flush()
                    imported_fights += 1
                    
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—É–Ω–¥–∞–º
                    for _, row in fight_data.iterrows():
                        fighter = fighter1 if row['fighter'] == fighter1_name else fighter2
                        
                        fight_stat = FightStats(
                            fight_id=fight.id,
                            fighter_id=fighter.id,
                            round_number=int(row['round']),
                            knockdowns=int(row['knockdowns']),
                            significant_strikes_landed=int(row['significant_strikes_landed']),
                            significant_strikes_attempted=int(row['significant_strikes_attempted']),
                            significant_strikes_rate=float(row['significant_strikes_rate']),
                            total_strikes_landed=int(row['total_strikes_landed']),
                            total_strikes_attempted=int(row['total_strikes_attempted']),
                            takedown_successful=int(row['takedown_successful']),
                            takedown_attempted=int(row['takedown_attempted']),
                            takedown_rate=float(row['takedown_rate']),
                            submission_attempt=int(row['submission_attempt']),
                            reversals=int(row['reversals']),
                            head_landed=int(row['head_landed']),
                            head_attempted=int(row['head_attempted']),
                            body_landed=int(row['body_landed']),
                            body_attempted=int(row['body_attempted']),
                            leg_landed=int(row['leg_landed']),
                            leg_attempted=int(row['leg_attempted']),
                            distance_landed=int(row['distance_landed']),
                            distance_attempted=int(row['distance_attempted']),
                            clinch_landed=int(row['clinch_landed']),
                            clinch_attempted=int(row['clinch_attempted']),
                            ground_landed=int(row['ground_landed']),
                            ground_attempted=int(row['ground_attempted']),
                            result=row['result'],
                            last_round=bool(row['last_round']),
                            time=str(row['time']),
                            winner=row['winner']
                        )
                        db.add(fight_stat)
                        imported_stats += 1
            
            db.commit()
            print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_fights} –±–æ–µ–≤ –∏ {imported_stats} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
        except Exception as e:
            db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
        finally:
            db.close()
    
    def _get_or_create_fighter(self, db, fighter_name: str) -> Fighter:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–π—Ü–∞"""
        fighter = db.query(Fighter).filter(Fighter.name_ru == fighter_name).first()
        if not fighter:
            fighter = Fighter(
                name_ru=fighter_name,
                name_en=fighter_name,  # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –∏–º—è
                career="UFC"
            )
            db.add(fighter)
            db.flush()
        return fighter
    
    def _translate_weight_class(self, name_ru: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        translations = {
            '–õ–µ–≥–∫–∏–π –≤–µ—Å': 'Lightweight',
            '–ü–æ–ª—É–ª–µ–≥–∫–∏–π –≤–µ—Å': 'Featherweight',
            '–¢—è–∂–µ–ª—ã–π –≤–µ—Å': 'Heavyweight',
            '–ü–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å': 'Welterweight',
            '–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å': 'Middleweight',
            '–ü–æ–ª—É—Ç—è–∂—ë–ª—ã–π –≤–µ—Å': 'Light Heavyweight',
            '–ù–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å': 'Flyweight',
            '–õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å': 'Bantamweight'
        }
        return translations.get(name_ru, name_ru)
    
    def refresh_data(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ (–∞–Ω–∞–ª–æ–≥ refresh_data() –∏–∑ ufc.stats)"""
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ufc.stats...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = self.download_ufc_stats_data()
        if df is not None:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ë–î
            self.import_to_database(df)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    def parse(self, *args, **kwargs) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.refresh_data()

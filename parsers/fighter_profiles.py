#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –±–æ–π—Ü–æ–≤ UFC
"""

import re
from typing import Dict, List, Optional
from bs4 import BeautifulSoup
from .base_parser import BaseParser
from database.models import Fighter, FightRecord
from database.config import SessionLocal


class FighterProfilesParser(BaseParser):
    """–ü–∞—Ä—Å–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –±–æ–π—Ü–æ–≤"""
    
    def __init__(self, cache_dir: str = ".cache/fighters"):
        super().__init__(cache_dir)
        self.base_url = "https://fight.ru"
    
    def extract_profile_data(self, profile_html: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ HTML"""
        soup = self.parse_html(profile_html)
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = self._extract_image_url(soup)
        
        # –ò–º–µ–Ω–∞
        name_ru, name_en = self._extract_names(soup)
        
        # –°—Ç—Ä–∞–Ω–∞ –∏ —Ñ–ª–∞–≥
        country_name, country_flag = self._extract_country_info(soup)
        
        # –ë–æ–µ–≤–æ–π —Ä–µ–∫–æ—Ä–¥
        fight_score = self._extract_fight_score(soup)
        
        # –§–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        height, weight, reach, age, nickname = self._extract_physical_data(soup)
        
        return {
            'image_url': image_url,
            'name_ru': name_ru,
            'name_en': name_en,
            'country_name': country_name,
            'country_flag': country_flag,
            'fight_score': fight_score,
            'height': height,
            'weight': weight,
            'reach': reach,
            'age': age,
            'nickname': nickname,
        }
    
    def _extract_image_url(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        selectors = [
            'img[itemprop="url"]',
            'meta[property="og:image"]',
            'img.fighter-photo',
            'img.profile-photo'
        ]
        
        for selector in selectors:
            if selector.startswith('meta'):
                element = soup.select_one(selector)
                if element and element.get('content'):
                    return element['content']
            else:
                element = soup.select_one(selector)
                if element and element.get('src'):
                    return element['src']
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        first_img = soup.find('img')
        if first_img and first_img.get('src'):
            return first_img['src']
        
        return ''
    
    def _extract_names(self, soup: BeautifulSoup) -> tuple[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º–µ–Ω–∞"""
        name_ru = ''
        name_en = ''
        
        # –†—É—Å—Å–∫–æ–µ –∏–º—è –∏–∑ h1 —Å –∫–ª–∞—Å—Å–æ–º fighter-name
        h1_name = soup.find('h1', class_='fighter-name')
        if h1_name:
            name_ru = self.clean_text(h1_name.get_text())
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è –∏–∑ div —Å –∫–ª–∞—Å—Å–æ–º fighter-latin-name
        latin_name = soup.find('div', class_='fighter-latin-name')
        if latin_name:
            name_en = self.clean_text(latin_name.get_text())
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω
        if not name_ru:
            h1 = soup.find(['h1', 'h2'])
            if h1:
                name_ru = self.clean_text(h1.get_text())
        
        if not name_en:
            en_candidates = [
                soup.find(class_='fighter-eng-name'),
                soup.find('div', class_='eng-name'),
                soup.find('span', class_='eng-name'),
            ]
            
            for cand in en_candidates:
                if cand and self.clean_text(cand.get_text()):
                    text = self.clean_text(cand.get_text())
                    if len(text) < 50 and re.search(r'^[A-Za-z\s\.\-\']+$', text):
                        name_en = text
                        break
        
        return name_ru, name_en
    
    def _extract_country_info(self, soup: BeautifulSoup) -> tuple[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ"""
        country_name = ''
        country_flag = ''
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        cn = soup.find(class_='fighter-country-name')
        if cn:
            country_name = self.clean_text(cn.get_text())
        
        # –§–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã
        cf = soup.find(class_='fighter-country-flag')
        if cf:
            flag_img = cf.find('img')
            if flag_img and flag_img.get('src'):
                country_flag = flag_img['src']
        
        return country_name, country_flag
    
    def _extract_fight_score(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–æ–µ–≤–æ–π —Ä–µ–∫–æ—Ä–¥"""
        fs = soup.find(class_='fight-score')
        if fs:
            return self.clean_text(fs.get_text())
        return ''
    
    def _extract_physical_data(self, soup: BeautifulSoup) -> tuple[str, str, str, str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±–æ–π—Ü–∞"""
        height = ''
        weight = ''
        reach = ''
        age = ''
        nickname = ''
        
        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ <li><span class="text">Label</span><span class="sub">Value</span></li>
        for li in soup.find_all('li'):
            text_span = li.find('span', class_='text')
            sub_span = li.find('span', class_='sub')
            
            if not text_span or not sub_span:
                continue
            
            label = self.clean_text(text_span.get_text())
            value = self.clean_text(sub_span.get_text())
            
            if not label or not value or len(value) > 100:
                continue
            
            label_lower = label.lower()
            
            if '—Ä–æ—Å—Ç' in label_lower and '–≤–µ—Å' in label_lower:
                # –†–æ—Å—Ç / –í–µ—Å –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ
                if ' / ' in value:
                    parts = value.split(' / ')
                    if len(parts) >= 2:
                        height = parts[0].strip()
                        weight = parts[1].strip()
            elif '—Ä–æ—Å—Ç' in label_lower:
                height = value
            elif '–≤–µ—Å' in label_lower:
                weight = value
            elif '—Ä–∞–∑–º–∞—Ö —Ä—É–∫' in label_lower:
                reach = value
            elif '–≤–æ–∑—Ä–∞—Å—Ç' in label_lower:
                age = value
            elif '–Ω–∏–∫' in label_lower:
                nickname = value
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ meta —Ç–µ–≥–∞—Ö
        if not height:
            height_meta = soup.find('meta', {'itemprop': 'height'})
            if height_meta and height_meta.get('content'):
                height = self.clean_text(height_meta['content'])
        
        if not weight:
            weight_meta = soup.find('meta', {'itemprop': 'weight'})
            if weight_meta and weight_meta.get('content'):
                weight = self.clean_text(weight_meta['content'])
        
        if not age:
            birth_meta = soup.find('meta', {'itemprop': 'birthDate'})
            if birth_meta and birth_meta.get('content'):
                age = birth_meta['content']
        
        return height, weight, reach, age, nickname
    
    def parse_fighter_profile(self, profile_url: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ–π—Ü–∞"""
        if not profile_url:
            return None
        
        html = self.fetch(profile_url)
        if not html:
            return None
        
        return self.extract_profile_data(html)
    
    def update_fighters_from_rankings(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –±–æ–π—Ü–æ–≤ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±–æ–π—Ü–æ–≤ –±–µ–∑ –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
            fighters = db.query(Fighter).filter(
                Fighter.image_url.is_(None) | (Fighter.image_url == '')
            ).all()
            
            print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ {len(fighters)} –±–æ–π—Ü–æ–≤...")
            
            for i, fighter in enumerate(fighters, 1):
                print(f"   {i}/{len(fighters)}: {fighter.name_ru}")
                
                if not fighter.profile_url:
                    continue
                
                profile_data = self.parse_fighter_profile(fighter.profile_url)
                if not profile_data:
                    continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ–π—Ü–∞
                fighter.name_en = profile_data.get('name_en') or fighter.name_en
                fighter.nickname = profile_data.get('nickname') or fighter.nickname
                fighter.country = profile_data.get('country_name') or fighter.country
                fighter.country_flag_url = profile_data.get('country_flag') or fighter.country_flag_url
                fighter.image_url = profile_data.get('image_url') or fighter.image_url
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                if profile_data.get('height'):
                    fighter.height = self._parse_height(profile_data['height'])
                if profile_data.get('weight'):
                    fighter.weight = self._parse_weight(profile_data['weight'])
                if profile_data.get('reach'):
                    fighter.reach = self._parse_reach(profile_data['reach'])
                if profile_data.get('age'):
                    fighter.age = self._parse_age(profile_data['age'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–µ–≤–æ–π —Ä–µ–∫–æ—Ä–¥
                if profile_data.get('fight_score'):
                    self._update_fight_record(fighter, profile_data['fight_score'])
            
            db.commit()
            print("‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏ –±–æ–π—Ü–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        finally:
            db.close()
    
    def _parse_height(self, height_str: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã"""
        if not height_str:
            return None
        
        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        numbers = re.findall(r'\d+', height_str)
        if numbers:
            return int(numbers[0])
        return None
    
    def _parse_weight(self, weight_str: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏—Ç –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã"""
        if not weight_str:
            return None
        
        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        numbers = re.findall(r'\d+', weight_str)
        if numbers:
            return int(numbers[0])
        return None
    
    def _parse_reach(self, reach_str: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–∞–∑–º–∞—Ö —Ä—É–∫ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã"""
        if not reach_str:
            return None
        
        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        numbers = re.findall(r'\d+', reach_str)
        if numbers:
            return int(numbers[0])
        return None
    
    def _parse_age(self, age_str: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏—Ç –≤–æ–∑—Ä–∞—Å—Ç"""
        if not age_str:
            return None
        
        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        numbers = re.findall(r'\d+', age_str)
        if numbers:
            return int(numbers[0])
        return None
    
    def _update_fight_record(self, fighter: Fighter, fight_score: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–æ–µ–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –±–æ–π—Ü–∞"""
        if not fight_score:
            return
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∫–æ—Ä–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "25-5-0")
        parts = fight_score.split('-')
        if len(parts) >= 3:
            try:
                wins = int(parts[0])
                losses = int(parts[1])
                draws = int(parts[2])
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥
                record = fighter.fight_record
                if not record:
                    record = FightRecord(fighter_id=fighter.id)
                    fighter.fight_record = record
                
                record.wins = wins
                record.losses = losses
                record.draws = draws
                
            except ValueError:
                pass
    
    def parse(self, *args, **kwargs) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("ü•ä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –±–æ–π—Ü–æ–≤...")
        self.update_fighters_from_rankings()














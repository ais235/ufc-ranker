#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ UFC —Å fight.ru
"""

import re
from typing import Dict, List, Optional
from bs4 import BeautifulSoup
from .base_parser import BaseParser
from database.models import Fighter, WeightClass, Ranking, FightRecord
from database.config import SessionLocal


class UFCRankingsParser(BaseParser):
    """–ü–∞—Ä—Å–µ—Ä —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ UFC"""
    
    def __init__(self, cache_dir: str = ".cache/rankings"):
        super().__init__(cache_dir)
        self.base_url = "https://fight.ru/fighter-ratings/ufc/"
    
    def parse_rankings(self, html: str) -> Dict[str, List[Dict]]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–∑ HTML"""
        soup = self.parse_html(html)
        categories = {}
        
        # –ò—â–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≤–µ—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        weight_sections = soup.find_all('div', class_='weight-name')
        
        for section in weight_sections:
            category_name = self.clean_text(section.get_text())
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if not category_name or category_name in ['–í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–í—Å–µ']:
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å–µ–∫—Ü–∏—é —Å –±–æ–π—Ü–∞–º–∏
            category_section = section.find_parent('div', class_='org-single')
            if not category_section:
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–æ–π—Ü–æ–≤
            fighters = self._extract_fighters_from_category(category_section, category_name)
            if fighters:
                categories[category_name] = fighters
        
        return categories
    
    def _extract_fighters_from_category(self, category_section, category_name: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ–π—Ü–æ–≤ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        fighters = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–µ–º–ø–∏–æ–Ω–∞ (first-fighter)
        champion = category_section.find('div', class_='first-fighter')
        if champion:
            fighter_data = self._extract_fighter_data(champion, is_champion=True)
            if fighter_data:
                fighters.append(fighter_data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–æ–π—Ü–æ–≤ (next-fighter)
        next_fighters = category_section.find_all('div', class_='next-fighter')
        
        for fighter in next_fighters:
            fighter_data = self._extract_fighter_data(fighter, is_champion=False)
            if fighter_data:
                fighters.append(fighter_data)
        
        return fighters
    
    def _extract_fighter_data(self, fighter_element, is_champion: bool = False) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ–π—Ü–∞ –∏–∑ HTML —ç–ª–µ–º–µ–Ω—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è
        name_elem = fighter_element.find('div', class_='fighter-name')
        if not name_elem:
            return None
        
        name = self.clean_text(name_elem.get_text())
        if not name:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        profile_url = None
        link_elem = fighter_element.find('a')
        if link_elem and link_elem.get('href'):
            profile_url = link_elem['href']
            if not profile_url.startswith('http'):
                profile_url = f"https://fight.ru{profile_url}"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        if is_champion:
            rank = '–ß'
            rank_position = 0
        else:
            number_elem = fighter_element.find('div', class_='fighter-number')
            if not number_elem:
                return None
            
            rank = self.clean_text(number_elem.get_text())
            try:
                rank_position = int(rank)
            except ValueError:
                rank_position = None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
        move_info = ""
        move_elem = fighter_element.find('div', class_='move')
        if move_elem:
            move_text = self.clean_text(move_elem.get_text())
            if 'up' in move_elem.get('class', []):
                move_info = f"‚Üë{move_text}"
            elif 'down' in move_elem.get('class', []):
                move_info = f"‚Üì{move_text}"
        
        return {
            'name': name,
            'rank': rank,
            'rank_position': rank_position,
            'is_champion': is_champion,
            'profile_url': profile_url,
            'move_info': move_info
        }
    
    def save_to_database(self, categories: Dict[str, List[Dict]]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        db = SessionLocal()
        try:
            for category_name, fighters in categories.items():
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≤–µ—Å–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                weight_class = db.query(WeightClass).filter(
                    WeightClass.name_ru == category_name
                ).first()
                
                if not weight_class:
                    weight_class = WeightClass(
                        name_ru=category_name,
                        name_en=self._translate_category_name(category_name),
                        gender=self._detect_gender(category_name),
                        is_p4p='p4p' in category_name.lower()
                    )
                    db.add(weight_class)
                    db.flush()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ–π—Ü–∞
                for fighter_data in fighters:
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –±–æ–π—Ü–∞
                    fighter = db.query(Fighter).filter(
                        Fighter.name_ru == fighter_data['name']
                    ).first()
                    
                    if not fighter:
                        fighter = Fighter(
                            name_ru=fighter_data['name'],
                            profile_url=fighter_data.get('profile_url')
                        )
                        db.add(fighter)
                        db.flush()
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
                    ranking = db.query(Ranking).filter(
                        Ranking.fighter_id == fighter.id,
                        Ranking.weight_class_id == weight_class.id
                    ).first()
                    
                    if not ranking:
                        ranking = Ranking(
                            fighter_id=fighter.id,
                            weight_class_id=weight_class.id,
                            rank_position=fighter_data.get('rank_position'),
                            is_champion=fighter_data['is_champion']
                        )
                        db.add(ranking)
                    else:
                        ranking.rank_position = fighter_data.get('rank_position')
                        ranking.is_champion = fighter_data['is_champion']
            
            db.commit()
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î")
            
        except Exception as e:
            db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        finally:
            db.close()
    
    def _translate_category_name(self, name_ru: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
        translations = {
            '–Ω–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å': 'Flyweight',
            '–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å': 'Bantamweight', 
            '–ø–æ–ª—É–ª–µ–≥–∫–∏–π –≤–µ—Å': 'Featherweight',
            '–ª–µ–≥–∫–∏–π –≤–µ—Å': 'Lightweight',
            '–ø–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å': 'Welterweight',
            '—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å': 'Middleweight',
            '–ø–æ–ª—É—Ç—è–∂—ë–ª—ã–π –≤–µ—Å': 'Light Heavyweight',
            '—Ç—è–∂–µ–ª—ã–π –≤–µ—Å': 'Heavyweight',
            '–∂–µ–Ω—Å–∫–∏–π –Ω–∞–∏–ª–µ–≥—á–∞–π—à–∏–π': 'Women\'s Flyweight',
            '–∂–µ–Ω—Å–∫–∏–π –ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å': 'Women\'s Bantamweight',
            '–∂–µ–Ω—Å–∫–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π': 'Women\'s Strawweight',
            '(p4p)': 'Pound for Pound',
            '(p4p) (–∂–µ–Ω)': 'Women\'s Pound for Pound'
        }
        return translations.get(name_ru, name_ru)
    
    def _detect_gender(self, category_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if '–∂–µ–Ω—Å–∫–∏–π' in category_name.lower() or '(–∂–µ–Ω)' in category_name.lower():
            return 'female'
        return 'male'
    
    def parse(self, use_cache: bool = True) -> Dict[str, List[Dict]]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("ü•ä –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ UFC...")
        
        html = self.fetch(self.base_url, use_cache=use_cache)
        if not html:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
            return {}
        
        categories = self.parse_rankings(html)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        self.save_to_database(categories)
        
        return categories





























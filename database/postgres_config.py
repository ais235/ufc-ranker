#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL –¥–ª—è UFC Ranker
"""

import os
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import QueuePool
from database.models import Base

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
POSTGRES_USER = os.getenv('POSTGRES_USER', 'ufc_ranker')
POSTGRES_PASSWORD = os.getenv('POSTGRES_PASSWORD', 'ufc_ranker_password')
POSTGRES_HOST = os.getenv('POSTGRES_HOST', 'localhost')
POSTGRES_PORT = os.getenv('POSTGRES_PORT', '5432')
POSTGRES_DB = os.getenv('POSTGRES_DB', 'ufc_ranker')

# URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DATABASE_URL = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
REDIS_PORT = int(os.getenv('REDIS_PORT', '6379'))
REDIS_DB = int(os.getenv('REDIS_DB', '0'))
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD', '')

# URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
REDIS_URL = f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}" if REDIS_PASSWORD else f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ PostgreSQL —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
engine = create_engine(
    DATABASE_URL,
    poolclass=QueuePool,
    pool_size=20,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
    max_overflow=30,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    pool_recycle=3600,  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å
    echo=False,  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    connect_args={
        "options": "-c timezone=UTC"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTC –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
    }
)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        create_indexes()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def create_indexes():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        with engine.connect() as conn:
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã fighters
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fighters_name_ru 
                ON fighters(name_ru);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fighters_country 
                ON fighters(country);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fighters_weight_class 
                ON fighters(weight_class);
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã rankings
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_rankings_weight_class_id 
                ON rankings(weight_class_id);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_rankings_rank_position 
                ON rankings(rank_position);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_rankings_is_champion 
                ON rankings(is_champion);
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã events
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_events_date 
                ON events(date);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_events_is_upcoming 
                ON events(is_upcoming);
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã fights
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fights_event_id 
                ON fights(event_id);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fights_fighter1_id 
                ON fights(fighter1_id);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fights_fighter2_id 
                ON fights(fighter2_id);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fights_fight_date 
                ON fights(fight_date);
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã fight_stats
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fight_stats_fight_id 
                ON fight_stats(fight_id);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fight_stats_fighter_id 
                ON fight_stats(fighter_id);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fight_stats_round_number 
                ON fight_stats(round_number);
            """)
            
            # –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_rankings_weight_class_rank 
                ON rankings(weight_class_id, rank_position);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fights_fighters 
                ON fights(fighter1_id, fighter2_id);
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_fight_stats_fight_round 
                ON fight_stats(fight_id, round_number);
            """)
            
        print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")


def get_db():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with engine.connect() as conn:
            result = conn.execute("SELECT 1")
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False


def get_database_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with engine.connect() as conn:
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            size_result = conn.execute("""
                SELECT pg_size_pretty(pg_database_size(current_database())) as size;
            """).fetchone()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
            tables = ['fighters', 'weight_classes', 'rankings', 'events', 'fights', 'fight_stats']
            table_stats = {}
            
            for table in tables:
                count_result = conn.execute(f"SELECT COUNT(*) FROM {table}").fetchone()
                table_stats[table] = count_result[0] if count_result else 0
            
            return {
                'database_size': size_result[0] if size_result else 'Unknown',
                'table_counts': table_stats
            }
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
        return None


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    if test_connection():
        init_database()
        stats = get_database_stats()
        if stats:
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            print(f"  –†–∞–∑–º–µ—Ä: {stats['database_size']}")
            for table, count in stats['table_counts'].items():
                print(f"  {table}: {count} –∑–∞–ø–∏—Å–µ–π")


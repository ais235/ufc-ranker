#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–±—ã—Ç–∏—è UFC
"""

import requests
from bs4 import BeautifulSoup
import sqlite3
import re
from datetime import datetime
from urllib.parse import urljoin, urlparse
import time

class EventDetailsParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏ UFC"""
    
    def __init__(self, db_path="ufc_ranker_v2.db"):
        self.db_path = db_path
        self.base_url = "https://en.wikipedia.org"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
        }
    
    def parse_event_details(self, event_url):
        """–ü–∞—Ä—Å–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏"""
        
        try:
            print(f"üîç –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {event_url}")
            
            response = requests.get(event_url, headers=self.headers, timeout=30)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ä—É—á–∫–µ
            gate_revenue = self.extract_gate_revenue(soup)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—è—Ö
            fights = self.extract_fights(soup)
            
            return {
                'gate_revenue': gate_revenue,
                'fights': fights
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return None
    
    def extract_gate_revenue(self, soup):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ä—É—á–∫–µ"""
        
        try:
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ä—É—á–∫–µ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            revenue_keywords = ['gate', 'revenue', 'attendance', '–≤—ã—Ä—É—á–∫–∞', '–¥–æ—Ö–æ–¥']
            
            for keyword in revenue_keywords:
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                elements = soup.find_all(string=lambda text: text and keyword.lower() in text.lower())
                
                for elem in elements:
                    parent = elem.parent
                    if parent:
                        text = parent.get_text(strip=True)
                        
                        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ (–≤—ã—Ä—É—á–∫–∞ –æ–±—ã—á–Ω–æ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)
                        money_patterns = [
                            r'\$[\d,]+(?:\.\d{2})?',  # $1,234,567.89
                            r'[\d,]+(?:\.\d{2})?\s*(?:million|–º–ª–Ω)',  # 1.5 million
                            r'[\d,]+(?:\.\d{2})?\s*(?:billion|–º–ª—Ä–¥)',  # 1.2 billion
                        ]
                        
                        for pattern in money_patterns:
                            matches = re.findall(pattern, text, re.IGNORECASE)
                            if matches:
                                print(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã—Ä—É—á–∫–µ: {text[:100]}...")
                                return self.parse_money_amount(matches[0])
            
            print("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã—Ä—É—á–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤—ã—Ä—É—á–∫–∏: {e}")
            return None
    
    def parse_money_amount(self, amount_str):
        """–ü–∞—Ä—Å–∏—Ç –¥–µ–Ω–µ–∂–Ω—É—é —Å—É–º–º—É"""
        
        try:
            # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç—ã –∏ –ø—Ä–æ–±–µ–ª—ã
            clean_amount = re.sub(r'[^\d,.]', '', amount_str)
            
            # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ
            clean_amount = clean_amount.replace(',', '')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
            if '.' in clean_amount:
                return float(clean_amount)
            else:
                return int(clean_amount)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—É–º–º—ã '{amount_str}': {e}")
            return None
    
    def extract_fights(self, soup):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—è—Ö"""
        
        try:
            fights = []
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É Results
            results_section = soup.find('h2', {'id': 'Results'})
            if not results_section:
                print("‚ùå –°–µ–∫—Ü–∏—è Results –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return fights
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Results
            results_table = results_section.find_next('table')
            if not results_table:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ Results –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return fights
            
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ Results –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É –±–æ–µ–≤
            fights = self.parse_fights_table(results_table)
            
            return fights
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –±–æ–µ–≤: {e}")
            return []
    
    def parse_fights_table(self, table):
        """–ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å –±–æ—è–º–∏"""
        
        try:
            fights = []
            rows = table.find_all('tr')
            
            current_card_type = None
            
            for row in rows:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∫–∞—Ä—Ç—ã
                card_type = self.detect_card_type(row)
                if card_type:
                    current_card_type = card_type
                    continue
                
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –±–æ—è
                fight_data = self.parse_fight_row(row, current_card_type)
                if fight_data:
                    fights.append(fight_data)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –±–æ–µ–≤: {len(fights)}")
            return fights
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–∞–±–ª–∏—Ü—ã –±–æ–µ–≤: {e}")
            return []
    
    def detect_card_type(self, row):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–∞—Ä—Ç—ã –±–æ—è"""
        
        try:
            text = row.get_text(strip=True).lower()
            
            if 'main card' in text:
                return 'main_card'
            elif 'preliminary card' in text:
                return 'preliminary_card'
            elif 'early preliminary card' in text:
                return 'early_preliminary_card'
            
            return None
            
        except Exception as e:
            return None
    
    def parse_fight_row(self, row, card_type):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –±–æ—è"""
        
        try:
            cells = row.find_all(['td', 'th'])
            if len(cells) < 6:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —è—á–µ–µ–∫
            weight_class_cell = cells[0]
            fighter1_cell = cells[1]
            result_cell = cells[2]
            fighter2_cell = cells[3]
            method_cell = cells[4]
            round_cell = cells[5]
            time_cell = cells[6] if len(cells) > 6 else None
            notes_cell = cells[7] if len(cells) > 7 else None
            
            # –ü–∞—Ä—Å–∏–º –≤–µ—Å–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            weight_class = weight_class_cell.get_text(strip=True)
            
            # –ü–∞—Ä—Å–∏–º –∏–º–µ–Ω–∞ –±–æ–π—Ü–æ–≤
            fighter1_name = fighter1_cell.get_text(strip=True)
            fighter2_name = fighter2_cell.get_text(strip=True)
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = result_cell.get_text(strip=True)
            
            # –ü–∞—Ä—Å–∏–º –º–µ—Ç–æ–¥ –ø–æ–±–µ–¥—ã
            method_text = method_cell.get_text(strip=True)
            method, method_details = self.parse_method(method_text)
            
            # –ü–∞—Ä—Å–∏–º —Ä–∞—É–Ω–¥
            round_text = round_cell.get_text(strip=True)
            fight_round = self.parse_round(round_text)
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            fight_time = None
            if time_cell:
                fight_time = time_cell.get_text(strip=True)
            
            # –ü–∞—Ä—Å–∏–º –∑–∞–º–µ—Ç–∫–∏
            notes = None
            if notes_cell:
                notes = notes_cell.get_text(strip=True)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner = self.determine_winner(fighter1_name, fighter2_name, result_text)
            
            return {
                'weight_class': weight_class,
                'fighter1_name': fighter1_name,
                'fighter2_name': fighter2_name,
                'winner': winner,
                'method': method,
                'method_details': method_details,
                'round': fight_round,
                'time': fight_time,
                'card_type': card_type,
                'notes': notes
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ –±–æ—è: {e}")
            return None
    
    def parse_method(self, method_text):
        """–ü–∞—Ä—Å–∏—Ç –º–µ—Ç–æ–¥ –ø–æ–±–µ–¥—ã"""
        
        try:
            # –ò—â–µ–º —Ä–µ—à–µ–Ω–∏—è —Å—É–¥–µ–π –≤ —Å–∫–æ–±–∫–∞—Ö
            judge_pattern = r'\(([^)]+)\)'
            judge_matches = re.findall(judge_pattern, method_text)
            
            method_details = None
            if judge_matches:
                method_details = judge_matches[0]
            
            # –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å—É–¥–µ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            clean_method = re.sub(r'\([^)]+\)', '', method_text).strip()
            
            return clean_method, method_details
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–µ—Ç–æ–¥–∞ '{method_text}': {e}")
            return method_text, None
    
    def parse_round(self, round_text):
        """–ü–∞—Ä—Å–∏—Ç —Ä–∞—É–Ω–¥"""
        
        try:
            if round_text.isdigit():
                return int(round_text)
            return None
            
        except Exception as e:
            return None
    
    def determine_winner(self, fighter1, fighter2, result_text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        
        try:
            # –ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –µ—Å—Ç—å "def.", —Ç–æ –ø–µ—Ä–≤—ã–π –±–æ–µ—Ü –ø–æ–±–µ–¥–∏–ª
            if 'def.' in result_text.lower():
                return fighter1
            
            # –ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –µ—Å—Ç—å –∏–º—è –±–æ–π—Ü–∞, —Ç–æ –æ–Ω –ø–æ–±–µ–¥–∏–ª
            if fighter1.lower() in result_text.lower():
                return fighter1
            elif fighter2.lower() in result_text.lower():
                return fighter2
            
            return None
            
        except Exception as e:
            return None
    
    def save_event_details_to_db(self, event_id, event_details):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
            if event_details['gate_revenue']:
                cursor.execute("""
                    UPDATE events SET gate_revenue = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                """, (event_details['gate_revenue'], event_id))
                print(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤—ã—Ä—É—á–∫–∞: ${event_details['gate_revenue']:,.2f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—è—Ö
            fights_saved = 0
            for fight in event_details['fights']:
                try:
                    # –ù–∞—Ö–æ–¥–∏–º ID –±–æ–π—Ü–æ–≤
                    fighter1_id = self.find_fighter_id(fight['fighter1_name'])
                    fighter2_id = self.find_fighter_id(fight['fighter2_name'])
                    winner_id = None
                    
                    if fight['winner']:
                        if fight['winner'] == fight['fighter1_name']:
                            winner_id = fighter1_id
                        elif fight['winner'] == fight['fighter2_name']:
                            winner_id = fighter2_id
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–π
                    cursor.execute("""
                        INSERT INTO event_fights (
                            event_id, fighter1_id, fighter2_id, winner_id,
                            weight_class, method, method_details, round, time,
                            card_type, notes
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        event_id, fighter1_id, fighter2_id, winner_id,
                        fight['weight_class'], fight['method'], fight['method_details'],
                        fight['round'], fight['time'], fight['card_type'], fight['notes']
                    ))
                    
                    fights_saved += 1
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–æ—è: {e}")
            
            conn.commit()
            conn.close()
            
            print(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–æ–µ–≤: {fights_saved}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    def find_fighter_id(self, fighter_name):
        """–ù–∞—Ö–æ–¥–∏—Ç ID –±–æ–π—Ü–∞ –ø–æ –∏–º–µ–Ω–∏"""
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ò—â–µ–º –±–æ–π—Ü–∞ –ø–æ –∏–º–µ–Ω–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä—É—Å—Å–∫–æ–µ, –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è)
            cursor.execute("""
                SELECT id FROM fighters 
                WHERE name_ru LIKE ? OR name_en LIKE ? OR full_name LIKE ?
            """, (f"%{fighter_name}%", f"%{fighter_name}%", f"%{fighter_name}%"))
            result = cursor.fetchone()
            
            conn.close()
            
            if result:
                return result[0]
            else:
                print(f"‚ö†Ô∏è –ë–æ–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω: {fighter_name}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–æ–π—Ü–∞ '{fighter_name}': {e}")
            return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ü–ê–†–°–ï–† –î–ï–¢–ê–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–û–ë–´–¢–ò–Ø–• UFC")
    print("=" * 60)
    
    parser = EventDetailsParser()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å URL
    try:
        conn = sqlite3.connect("ufc_ranker_v2.db")
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, name, event_url FROM events 
            WHERE event_url IS NOT NULL AND status = 'completed'
            ORDER BY date DESC LIMIT 3
        """)
        
        events = cursor.fetchall()
        conn.close()
        
        if not events:
            print("‚ùå –°–æ–±—ã—Ç–∏—è —Å URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(events)}")
        
        for event_id, event_name, event_url in events:
            print(f"\nüîç –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏–µ: {event_name}")
            
            # –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            event_details = parser.parse_event_details(event_url)
            
            if event_details:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                parser.save_event_details_to_db(event_id, event_details)
                
                print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{event_name}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ '{event_name}'")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")

if __name__ == "__main__":
    main()

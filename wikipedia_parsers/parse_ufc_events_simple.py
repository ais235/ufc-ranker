#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —Å–æ–±—ã—Ç–∏–π UFC —Å Wikipedia
–°–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è UFC 1-319 –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import re
from datetime import datetime, date

def create_ufc_events():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è UFC 1-319 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô UFC 1-319")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect("ufc_ranker_v2.db")
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è UFC 1-319
        events_created = 0
        
        for ufc_num in range(1, 320):
            event_name = f"UFC {ufc_num}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
            cursor.execute("SELECT id FROM events WHERE name = ?", (event_name,))
            existing = cursor.fetchone()
            
            if not existing:
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                cursor.execute("""
                    INSERT INTO events (
                        name, event_number, event_type, date, venue, location,
                        status, is_upcoming, created_at, updated_at
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                """, (
                    event_name,
                    str(ufc_num),
                    'UFC',
                    None,  # –î–∞—Ç–∞ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–∑–∂–µ
                    None,  # –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
                    None,  # –ì–æ—Ä–æ–¥
                    'completed',
                    False
                ))
                events_created += 1
        
        conn.commit()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {events_created} —Å–æ–±—ã—Ç–∏–π UFC 1-319")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("SELECT COUNT(*) FROM events")
        total_events = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM events WHERE event_number IS NOT NULL")
        numbered_events = cursor.fetchone()[0]
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}")
        print(f"   ‚Ä¢ –°–æ–±—ã—Ç–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏: {numbered_events}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:")
        cursor.execute("""
            SELECT name FROM events 
            WHERE event_number IS NOT NULL 
            ORDER BY CAST(event_number AS INTEGER) 
            LIMIT 10
        """)
        
        examples = cursor.fetchall()
        for (name,) in examples:
            print(f"   ‚Ä¢ {name}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    create_ufc_events()

if __name__ == "__main__":
    main()

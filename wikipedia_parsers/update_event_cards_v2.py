import sqlite3
import requests
from lxml import html
from datetime import datetime
import sys
import codecs
import re

sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

def fetch_html(url):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ URL."""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        return html.fromstring(response.content)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url}: {e}")
        return None

def parse_event_card(event_url):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–±—ã—Ç–∏—è Wikipedia –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–∞—Ö –±–æ–µ–≤."""
    tree = fetch_html(event_url)
    if not tree:
        return []
    
    print(f"üîç –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç—É —Å–æ–±—ã—Ç–∏—è: {event_url}")
    
    fights_data = []
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    results_table = tree.xpath('//h2[contains(text(), "Results")]/following-sibling::table[1]')
    
    if not results_table:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ - –∏—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ "Main card", "Weight class"
        results_table = tree.xpath('//table[.//th[contains(text(), "Main card")] or .//th[contains(text(), "Weight class")]]')
    
    if not results_table:
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []
    
    table = results_table[0]
    rows = table.xpath('.//tr')
    
    current_card_type = None
    fight_order = 0
    
    for row in rows:
        cells = row.xpath('.//td | .//th')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∫–∞—Ä—Ç—ã (–∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —è—á–µ–π–∫—É)
        if len(cells) == 1:
            first_cell_text = cells[0].text_content().strip().lower()
            if 'main card' in first_cell_text:
                current_card_type = 'Main card'
                fight_order = 0
                print(f"üìã –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞: {current_card_type}")
                continue
            elif 'preliminary card' in first_cell_text:
                current_card_type = 'Preliminary card'
                fight_order = 0
                print(f"üìã –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞: {current_card_type}")
                continue
            elif 'early preliminary card' in first_cell_text:
                current_card_type = 'Early preliminary card'
                fight_order = 0
                print(f"üìã –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞: {current_card_type}")
                continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —è—á–µ–µ–∫
        if len(cells) < 6:
            continue
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –±–æ—è
        try:
            weight_class = cells[0].text_content().strip()
            fighter1_name = cells[1].text_content().strip()
            result = cells[2].text_content().strip()
            fighter2_name = cells[3].text_content().strip()
            method = cells[4].text_content().strip()
            round_info = cells[5].text_content().strip()
            time_info = cells[6].text_content().strip() if len(cells) > 6 else ""
            notes = cells[7].text_content().strip() if len(cells) > 7 else ""
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏–ª–∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not weight_class or weight_class in ['Weight class', 'Main card', 'Preliminary card', 'Early preliminary card']:
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É —Å—É–¥–µ–π –∏–∑ –º–µ—Ç–æ–¥–∞
            judges_score = None
            if 'decision' in method.lower():
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ü–µ–Ω–æ–∫ —Å—É–¥–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 49‚Äì45, 49‚Äì45, 49‚Äì46)
                score_match = re.search(r'\(([0-9‚Äì-]+(?:,\s*[0-9‚Äì-]+)*)\)', method)
                if score_match:
                    judges_score = score_match.group(1)
            
            fight_order += 1
            
            fight_data = {
                'weight_class': weight_class,
                'fighter1_name': fighter1_name,
                'fighter2_name': fighter2_name,
                'method': method,
                'round': round_info,
                'time': time_info,
                'notes': notes,
                'card_type': current_card_type,
                'judges_score': judges_score,
                'fight_order': fight_order,
                'is_title_fight': 'title' in notes.lower() or 'championship' in notes.lower(),
                'is_main_event': fight_order == 1 and current_card_type and 'main card' in current_card_type.lower()
            }
            
            fights_data.append(fight_data)
            print(f"   ‚úÖ –ë–æ–π #{fight_order}: {fighter1_name} vs {fighter2_name}")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏: {e}")
            continue
    
    print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –±–æ–µ–≤: {len(fights_data)}")
    return fights_data

def update_fights_in_database(event_name, fights_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–æ–∏ –≤ –ë–î —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ä—Ç–∞—Ö."""
    conn = None
    updated_count = 0
    try:
        conn = sqlite3.connect("ufc_ranker_v2.db")
        cursor = conn.cursor()
        
        for fight_data in fights_data:
            # –ò—â–µ–º –±–æ–π –ø–æ event_name, fighter1_name –∏ fighter2_name
            # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∏–º–µ–Ω–∞ –±–æ–π—Ü–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–ø—É—Ç–∞–Ω—ã
            cursor.execute("""
                UPDATE fights
                SET card_type = ?, judges_score = ?, fight_order = ?
                WHERE event_name = ? AND (
                    (fighter1_name = ? AND fighter2_name = ?) OR
                    (fighter1_name = ? AND fighter2_name = ?)
                )
            """, (
                fight_data['card_type'],
                fight_data['judges_score'],
                fight_data['fight_order'],
                event_name,
                fight_data['fighter1_name'],
                fight_data['fighter2_name'],
                fight_data['fighter2_name'], # –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
                fight_data['fighter1_name']
            ))
            
            if cursor.rowcount > 0:
                updated_count += cursor.rowcount
                print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –±–æ–π: {fight_data['fighter1_name']} vs {fight_data['fighter2_name']}")
            else:
                print(f"   ‚ö†Ô∏è –ë–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {fight_data['fighter1_name']} vs {fight_data['fighter2_name']}")
        
        conn.commit()
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ–µ–≤: {e}")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ–µ–≤: {e}")
    finally:
        if conn:
            conn.close()
    return updated_count

def main():
    print("=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –û –ö–ê–†–¢–ê–• –°–û–ë–´–¢–ò–ô ===")
    conn = None
    total_updated_fights = 0
    try:
        conn = sqlite3.connect("ufc_ranker_v2.db")
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å –±–æ—è–º–∏ –≤ –ë–î (–Ω–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã events, –∞ –∏–∑ fights)
        cursor.execute("""
            SELECT DISTINCT event_name, COUNT(*) as fight_count
            FROM fights 
            WHERE event_name IS NOT NULL
            GROUP BY event_name
            HAVING fight_count > 0
            ORDER BY fight_count DESC
            LIMIT 20
        """)
        events_with_fights = cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(events_with_fights)} —Å–æ–±—ã—Ç–∏–π —Å –±–æ—è–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        for event_name, fight_count in events_with_fights:
            print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ: {event_name} ({fight_count} –±–æ–µ–≤)")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ events —Å URL
            cursor.execute("""
                SELECT id, name, event_url 
                FROM events 
                WHERE event_url IS NOT NULL AND event_url != ''
                AND (name = ? OR name LIKE ? OR ? LIKE name)
                ORDER BY id DESC
                LIMIT 1
            """, (event_name, f"%{event_name}%", event_name))
            
            event_row = cursor.fetchone()
            if not event_row:
                print(f"   ‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ events —Å URL")
                continue
                
            event_id, event_db_name, event_url = event_row
            print(f"   üìã –ù–∞–π–¥–µ–Ω–æ –≤ events: {event_db_name}")
            print(f"   üîó URL: {event_url}")
            
            # –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç—É —Å–æ–±—ã—Ç–∏—è
            fights_data = parse_event_card(event_url)
            if fights_data:
                updated_count = update_fights_in_database(event_name, fights_data)
                total_updated_fights += updated_count
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–µ")
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SQLite: {e}")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if conn:
            conn.close()
    
    print(f"\nüéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"   –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –±–æ–µ–≤: {total_updated_fights}")

if __name__ == "__main__":
    main()

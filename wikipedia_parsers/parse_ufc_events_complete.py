#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å–æ–±—ã—Ç–∏–π UFC —Å Wikipedia
–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Past events
"""

import requests
from bs4 import BeautifulSoup
import sqlite3
import re
from datetime import datetime
from urllib.parse import urljoin, urlparse
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class UFCEventsParser:
    """–ü–∞—Ä—Å–µ—Ä –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π UFC —Å Wikipedia"""
    
    def __init__(self, db_path="ufc_ranker_v2.db"):
        self.db_path = db_path
        self.base_url = "https://en.wikipedia.org"
        self.events_url = "https://en.wikipedia.org/wiki/List_of_UFC_events"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
        }
    
    def parse_all_events(self):
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è UFC —Å Wikipedia"""
        
        try:
            logger.info("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ UFC...")
            response = requests.get(self.events_url, headers=self.headers, timeout=30)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            all_events = []
            
            # –ü–∞—Ä—Å–∏–º —Å–µ–∫—Ü–∏—é Past events
            logger.info("üìã –ü–∞—Ä—Å–∏–º —Å–µ–∫—Ü–∏—é Past events...")
            past_events = self.parse_past_events(soup)
            all_events.extend(past_events)
            logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(past_events)} –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π")
            
            # –ü–∞—Ä—Å–∏–º —Å–µ–∫—Ü–∏—é Scheduled events
            logger.info("üìã –ü–∞—Ä—Å–∏–º —Å–µ–∫—Ü–∏—é Scheduled events...")
            scheduled_events = self.parse_scheduled_events(soup)
            all_events.extend(scheduled_events)
            logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(scheduled_events)} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            
            logger.info(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(all_events)}")
            return all_events
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–±—ã—Ç–∏–π: {e}")
            return []
    
    def parse_past_events(self, soup):
        """–ü–∞—Ä—Å–∏—Ç —Å–µ–∫—Ü–∏—é Past events"""
        
        events = []
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é Past events
            past_section = soup.find('h2', {'id': 'Past_events'})
            if not past_section:
                logger.warning("‚ö†Ô∏è –°–µ–∫—Ü–∏—è Past events –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return events
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            table = past_section.find_next('table')
            if not table:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ Past events –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return events
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            rows = table.find_all('tr')
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ Past events")
            
            for i, row in enumerate(rows[1:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                try:
                    cells = row.find_all(['td', 'th'])
                    if len(cells) < 3:
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —è—á–µ–µ–∫
                    event_data = self.extract_event_data(cells, "Past_events")
                    if event_data:
                        events.append(event_data)
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ {i} –≤ Past events: {e}")
                    continue
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Past events: {e}")
        
        return events
    
    def parse_scheduled_events(self, soup):
        """–ü–∞—Ä—Å–∏—Ç —Å–µ–∫—Ü–∏—é Scheduled events"""
        
        events = []
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é Scheduled events
            scheduled_section = soup.find('h2', {'id': 'Scheduled_events'})
            if not scheduled_section:
                logger.warning("‚ö†Ô∏è –°–µ–∫—Ü–∏—è Scheduled events –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return events
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            table = scheduled_section.find_next('table')
            if not table:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ Scheduled events –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return events
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            rows = table.find_all('tr')
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ Scheduled events")
            
            for i, row in enumerate(rows[1:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                try:
                    cells = row.find_all(['td', 'th'])
                    if len(cells) < 3:
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —è—á–µ–µ–∫
                    event_data = self.extract_event_data(cells, "Scheduled_events")
                    if event_data:
                        events.append(event_data)
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ {i} –≤ Scheduled events: {e}")
                    continue
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Scheduled events: {e}")
        
        return events
    
    def extract_event_data(self, cells, section_type):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏ –∏–∑ —è—á–µ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã"""
        
        try:
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–æ–±—ã—á–Ω–æ –≤ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ)
            event_name_cell = cells[0]
            event_name = event_name_cell.get_text(strip=True)
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            event_name = re.sub(r'\[.*?\]', '', event_name)  # –£–±–∏—Ä–∞–µ–º [edit]
            event_name = event_name.strip()
            
            if not event_name or event_name in ['Event', 'Date', 'Venue', 'City', '#']:
                return None
            
            # –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è (–æ–±—ã—á–Ω–æ –≤–æ –≤—Ç–æ—Ä–æ–π —è—á–µ–π–∫–µ)
            date_text = cells[1].get_text(strip=True) if len(cells) > 1 else ""
            
            # –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –≤ —Ç—Ä–µ—Ç—å–µ–π —è—á–µ–π–∫–µ)
            venue_text = cells[2].get_text(strip=True) if len(cells) > 2 else ""
            
            # –ì–æ—Ä–æ–¥ (–æ–±—ã—á–Ω–æ –≤ —á–µ—Ç–≤–µ—Ä—Ç–æ–π —è—á–µ–π–∫–µ)
            location_text = cells[3].get_text(strip=True) if len(cells) > 3 else ""
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            event_date = self.parse_date(date_text)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_type = self.determine_event_type(event_name, section_type)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è
            event_number = self.extract_event_number(event_name)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = "completed" if section_type == "Past_events" else "scheduled"
            
            event_data = {
                'name': event_name,
                'event_number': event_number,
                'event_type': event_type,
                'date': event_date,
                'venue': venue_text,
                'location': location_text,
                'status': status,
                'is_upcoming': section_type != "Past_events"
            }
            
            return event_data
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è: {e}")
            return None
    
    def parse_date(self, date_text):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        
        if not date_text:
            return None
        
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            date_text = re.sub(r'\[.*?\]', '', date_text)
            date_text = date_text.strip()
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            date_formats = [
                '%B %d, %Y',      # January 1, 2023
                '%b %d, %Y',      # Jan 1, 2023
                '%d %B %Y',       # 1 January 2023
                '%d %b %Y',       # 1 Jan 2023
                '%Y-%m-%d',       # 2023-01-01
                '%m/%d/%Y',       # 01/01/2023
                '%d/%m/%Y',       # 01/01/2023
            ]
            
            for fmt in date_formats:
                try:
                    return datetime.strptime(date_text, fmt).date()
                except ValueError:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{date_text}': {e}")
            return None
    
    def determine_event_type(self, event_name, section_type):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è"""
        
        event_name_lower = event_name.lower()
        
        if 'ufc' in event_name_lower and any(num in event_name_lower for num in ['1', '2', '3', '4', '5', '6', '7', '8', '9']):
            return 'UFC'
        elif 'fight night' in event_name_lower:
            return 'Fight Night'
        elif 'ultimate fighter' in event_name_lower or 'tuf' in event_name_lower:
            return 'The Ultimate Fighter'
        elif 'fox' in event_name_lower:
            return 'UFC on Fox'
        elif 'espn' in event_name_lower:
            return 'UFC on ESPN'
        elif 'abc' in event_name_lower:
            return 'UFC on ABC'
        elif 'fx' in event_name_lower:
            return 'UFC on FX'
        elif 'versus' in event_name_lower:
            return 'UFC on Versus'
        elif 'spike' in event_name_lower:
            return 'UFC on Spike'
        elif 'fuel' in event_name_lower:
            return 'UFC on Fuel TV'
        elif 'fs1' in event_name_lower:
            return 'UFC on FS1'
        elif 'fs2' in event_name_lower:
            return 'UFC on FS2'
        else:
            return 'Other'
    
    def extract_event_number(self, event_name):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è"""
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω UFC XXX
        match = re.search(r'UFC\s+(\d+)', event_name)
        if match:
            return match.group(1)
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω Fight Night XXX
        match = re.search(r'Fight\s+Night\s+(\d+)', event_name)
        if match:
            return f"FN{match.group(1)}"
        
        return None
    
    def save_events(self, events):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        
        if not events:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            new_count = 0
            updated_count = 0
            skipped_count = 0
            
            for event in events:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
                    cursor.execute("""
                        SELECT id FROM events 
                        WHERE name = ? OR (event_number = ? AND event_number IS NOT NULL)
                    """, (event['name'], event['event_number']))
                    
                    existing = cursor.fetchone()
                    
                    if existing:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                        cursor.execute("""
                            UPDATE events SET
                                event_number = ?,
                                event_type = ?,
                                date = ?,
                                venue = ?,
                                location = ?,
                                status = ?,
                                is_upcoming = ?,
                                updated_at = CURRENT_TIMESTAMP
                            WHERE id = ?
                        """, (
                            event['event_number'],
                            event['event_type'],
                            event['date'],
                            event['venue'],
                            event['location'],
                            event['status'],
                            event['is_upcoming'],
                            existing[0]
                        ))
                        updated_count += 1
                        
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        cursor.execute("""
                            INSERT INTO events (
                                name, event_number, event_type, date, venue, location,
                                status, is_upcoming, created_at, updated_at
                            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                        """, (
                            event['name'],
                            event['event_number'],
                            event['event_type'],
                            event['date'],
                            event['venue'],
                            event['location'],
                            event['status'],
                            event['is_upcoming']
                        ))
                        new_count += 1
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{event['name']}': {e}")
                    skipped_count += 1
                    continue
            
            conn.commit()
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   ‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {new_count}")
            logger.info(f"   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {updated_count}")
            logger.info(f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {skipped_count}")
            logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(events)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            if conn:
                conn.rollback()
        finally:
            if conn:
                conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ü–ê–†–°–ï–† –í–°–ï–• –°–û–ë–´–¢–ò–ô UFC –° WIKIPEDIA")
    print("=" * 50)
    
    parser = UFCEventsParser()
    
    # –ü–∞—Ä—Å–∏–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    events = parser.parse_all_events()
    
    if events:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        parser.save_events(events)
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è")

if __name__ == "__main__":
    main()

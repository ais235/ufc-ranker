#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã fights —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import sqlite3
import sys
from datetime import datetime

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    backup_name = f"ufc_ranker_v2_backup_before_fights_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
    
    try:
        import shutil
        shutil.copy2("ufc_ranker_v2.db", backup_name)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
        return backup_name
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None

def fix_fights_table():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É fights —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
    
    print("üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ FIGHTS")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_name = create_backup()
    if not backup_name:
        return False
    
    try:
        conn = sqlite3.connect("ufc_ranker_v2.db")
        cursor = conn.cursor()
        
        print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É fights —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É fights —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        cursor.execute("""
            CREATE TABLE fights_new (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                event_name TEXT,
                fighter1_name TEXT,
                fighter2_name TEXT,
                weight_class TEXT,
                scheduled_rounds INTEGER DEFAULT 3,
                method TEXT,
                method_details TEXT,
                round INTEGER,
                time TEXT,
                fight_date DATE,
                location TEXT,
                notes TEXT,
                is_title_fight BOOLEAN DEFAULT 0,
                is_main_event BOOLEAN DEFAULT 0,
                is_win TEXT,
                is_loss TEXT,
                is_draw TEXT,
                is_nc TEXT,
                fighter1_record TEXT,
                fighter2_record TEXT,
                fight_time_seconds INTEGER,
                card_type TEXT,
                referee TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        print("   ‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ fights —Å–æ–∑–¥–∞–Ω–∞")
        
        print("\n2Ô∏è‚É£ –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        cursor.execute("SELECT COUNT(*) FROM fights")
        old_count = cursor.fetchone()[0]
        
        if old_count > 0:
            print(f"   üìä –ö–æ–ø–∏—Ä—É–µ–º {old_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT 
                    id, event_name, fighter1_id, fighter2_id, weight_class,
                    scheduled_rounds, method, method_details, round, time,
                    fight_date, location, notes, is_title_fight, is_main_event,
                    fighter1_record, fighter2_record, fight_time_seconds,
                    card_type, referee, created_at, updated_at
                FROM fights
            """)
            
            old_data = cursor.fetchall()
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            for row in old_data:
                (id_val, event_name, fighter1_id, fighter2_id, weight_class,
                 scheduled_rounds, method, method_details, round, time,
                 fight_date, location, notes, is_title_fight, is_main_event,
                 fighter1_record, fighter2_record, fight_time_seconds,
                 card_type, referee, created_at, updated_at) = row
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –±–æ–π—Ü–æ–≤ –ø–æ ID
                fighter1_name = None
                fighter2_name = None
                
                if fighter1_id:
                    cursor.execute("SELECT name_en FROM fighters WHERE id = ?", (fighter1_id,))
                    result = cursor.fetchone()
                    if result:
                        fighter1_name = result[0]
                
                if fighter2_id:
                    cursor.execute("SELECT name_en FROM fighters WHERE id = ?", (fighter2_id,))
                    result = cursor.fetchone()
                    if result:
                        fighter2_name = result[0]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è is_win, is_loss, is_draw, is_nc
                is_win = None
                is_loss = None
                is_draw = None
                is_nc = None
                
                # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                if method:
                    if method.lower() in ['ko', 'tko', 'submission', 'decision']:
                        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ fighter1 –≤—ã–∏–≥—Ä–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –ø–æ–±–µ–¥—ã
                        is_win = fighter1_name
                    elif method.lower() == 'draw':
                        is_draw = "–ù–∏—á—å—è"
                    elif method.lower() in ['nc', 'no contest']:
                        is_nc = "No Contest"
                    else:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
                        pass
                
                cursor.execute("""
                    INSERT INTO fights_new (
                        id, event_name, fighter1_name, fighter2_name, weight_class,
                        scheduled_rounds, method, method_details, round, time,
                        fight_date, location, notes, is_title_fight, is_main_event,
                        is_win, is_loss, is_draw, is_nc,
                        fighter1_record, fighter2_record, fight_time_seconds,
                        card_type, referee, created_at, updated_at
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    id_val, event_name, fighter1_name, fighter2_name, weight_class,
                    scheduled_rounds, method, method_details, round, time,
                    fight_date, location, notes, is_title_fight, is_main_event,
                    is_win, is_loss, is_draw, is_nc,
                    fighter1_record, fighter2_record, fight_time_seconds,
                    card_type, referee, created_at, updated_at
                ))
            
            print(f"   ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {old_count} –∑–∞–ø–∏—Å–µ–π")
        else:
            print("   ‚ÑπÔ∏è –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
        print("\n3Ô∏è‚É£ –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–æ–≤–æ–π...")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
        cursor.execute("DROP TABLE fights")
        cursor.execute("ALTER TABLE fights_new RENAME TO fights")
        
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ fights –∑–∞–º–µ–Ω–µ–Ω–∞")
        
        print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("CREATE INDEX idx_fights_event_name ON fights(event_name)")
        cursor.execute("CREATE INDEX idx_fights_fighter1_name ON fights(fighter1_name)")
        cursor.execute("CREATE INDEX idx_fights_fighter2_name ON fights(fighter2_name)")
        cursor.execute("CREATE INDEX idx_fights_date ON fights(fight_date)")
        cursor.execute("CREATE INDEX idx_fights_weight_class ON fights(weight_class)")
        cursor.execute("CREATE INDEX idx_fights_is_win ON fights(is_win)")
        cursor.execute("CREATE INDEX idx_fights_is_loss ON fights(is_loss)")
        
        print("   ‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()
        
        print("\n‚úÖ –¢–ê–ë–õ–ò–¶–ê FIGHTS –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã fights: {e}")
        return False

def verify_fights_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã fights"""
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ FIGHTS")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect("ufc_ranker_v2.db")
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        cursor.execute("PRAGMA table_info(fights)")
        columns = cursor.fetchall()
        
        print(f"üìã –¢–∞–±–ª–∏—Ü–∞ fights - –∫–æ–ª–æ–Ω–æ–∫: {len(columns)}")
        print("\n–ö–æ–ª–æ–Ω–∫–∏:")
        for col in columns:
            col_id, name, data_type, not_null, default_val, pk = col
            pk_mark = " üîë" if pk else ""
            not_null_mark = " NOT NULL" if not_null else ""
            default_mark = f" DEFAULT {default_val}" if default_val else ""
            print(f"   ‚Ä¢ {name} ({data_type}){not_null_mark}{default_mark}{pk_mark}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM fights")
        count = cursor.fetchone()[0]
        print(f"\nüìä –ó–∞–ø–∏—Å–µ–π: {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if count > 0:
            cursor.execute("SELECT * FROM fights LIMIT 3")
            sample_data = cursor.fetchall()
            print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
            for i, row in enumerate(sample_data, 1):
                print(f"   {i}. {row}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

if __name__ == "__main__":
    if fix_fights_table():
        verify_fights_structure()
    else:
        print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã fights –Ω–µ —É–¥–∞–ª–æ—Å—å")
        sys.exit(1)

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import sqlite3
import sys
from datetime import datetime

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    backup_name = f"ufc_ranker_v2_backup_before_final_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
    
    try:
        import shutil
        shutil.copy2("ufc_ranker_v2.db", backup_name)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
        return backup_name
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None

def fix_database_structure():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_name = create_backup()
    if not backup_name:
        return False
    
    try:
        conn = sqlite3.connect("ufc_ranker_v2.db")
        cursor = conn.cursor()
        
        print("\n1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω—é—é —Ç–∞–±–ª–∏—Ü—É fighter_fights...")
        cursor.execute("DROP TABLE IF EXISTS fighter_fights")
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ fighter_fights —É–¥–∞–ª–µ–Ω–∞")
        
        print("\n2Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω—é—é –∫–æ–ª–æ–Ω–∫—É full_name –∏–∑ fighters...")
        cursor.execute("ALTER TABLE fighters DROP COLUMN full_name")
        print("   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ full_name —É–¥–∞–ª–µ–Ω–∞ –∏–∑ fighters")
        
        print("\n3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É fights...")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É fights —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        cursor.execute("""
            CREATE TABLE fights_new (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                event_name TEXT,
                fighter1_id INTEGER NOT NULL,
                fighter2_id INTEGER NOT NULL,
                weight_class TEXT,
                scheduled_rounds INTEGER DEFAULT 3,
                method TEXT,
                method_details TEXT,
                round INTEGER,
                time TEXT,
                fight_date DATE,
                location TEXT,
                notes TEXT,
                is_title_fight BOOLEAN DEFAULT 0,
                is_main_event BOOLEAN DEFAULT 0,
                fighter1_name TEXT,
                fighter2_name TEXT,
                winner_name TEXT,
                fighter1_record TEXT,
                fighter2_record TEXT,
                fight_time_seconds INTEGER,
                card_type TEXT,
                referee TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (fighter1_id) REFERENCES fighters(id),
                FOREIGN KEY (fighter2_id) REFERENCES fighters(id)
            )
        """)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        cursor.execute("SELECT COUNT(*) FROM fights")
        old_count = cursor.fetchone()[0]
        
        if old_count > 0:
            print(f"   üìä –ö–æ–ø–∏—Ä—É–µ–º {old_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
            cursor.execute("""
                INSERT INTO fights_new (
                    id, event_name, fighter1_id, fighter2_id, weight_class,
                    scheduled_rounds, method, method_details, round, time,
                    fight_date, location, notes, is_title_fight, is_main_event,
                    fighter1_record, fighter2_record, fight_time_seconds,
                    card_type, referee, created_at, updated_at
                )
                SELECT 
                    id, event_name, fighter1_id, fighter2_id, weight_class,
                    scheduled_rounds, method, method_details, round, time,
                    fight_date, location, notes, is_title_fight, is_main_event,
                    fighter1_record, fighter2_record, fight_time_seconds,
                    card_type, referee, created_at, updated_at
                FROM fights
            """)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
        cursor.execute("DROP TABLE fights")
        cursor.execute("ALTER TABLE fights_new RENAME TO fights")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("CREATE INDEX idx_fights_event_name ON fights(event_name)")
        cursor.execute("CREATE INDEX idx_fights_fighter1 ON fights(fighter1_id)")
        cursor.execute("CREATE INDEX idx_fights_fighter2 ON fights(fighter2_id)")
        cursor.execute("CREATE INDEX idx_fights_date ON fights(fight_date)")
        cursor.execute("CREATE INDEX idx_fights_weight_class ON fights(weight_class)")
        
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ fights –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        print("\n4Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É rankings...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É rankings —Å weight_class –≤–º–µ—Å—Ç–æ weight_class_id
        cursor.execute("""
            CREATE TABLE rankings_new (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                fighter_id INTEGER NOT NULL,
                weight_class TEXT NOT NULL,
                rank_position INTEGER,
                is_champion BOOLEAN DEFAULT 0,
                rank_change INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (fighter_id) REFERENCES fighters(id)
            )
        """)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–º–µ–Ω–æ–π weight_class_id –Ω–∞ weight_class
        cursor.execute("""
            INSERT INTO rankings_new (
                id, fighter_id, weight_class, rank_position, is_champion, 
                rank_change, created_at, updated_at
            )
            SELECT 
                r.id, r.fighter_id, wc.name_en, r.rank_position, r.is_champion,
                r.rank_change, r.created_at, r.updated_at
            FROM rankings r
            JOIN weight_classes wc ON r.weight_class_id = wc.id
        """)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
        cursor.execute("DROP TABLE rankings")
        cursor.execute("ALTER TABLE rankings_new RENAME TO rankings")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("CREATE INDEX idx_rankings_fighter ON rankings(fighter_id)")
        cursor.execute("CREATE INDEX idx_rankings_weight_class ON rankings(weight_class)")
        cursor.execute("CREATE INDEX idx_rankings_position ON rankings(rank_position)")
        
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ rankings –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        print("\n5Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É upcoming_fights...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É upcoming_fights —Å weight_class –≤–º–µ—Å—Ç–æ weight_class_id
        cursor.execute("""
            CREATE TABLE upcoming_fights_new (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                fighter1_id INTEGER NOT NULL,
                fighter2_id INTEGER NOT NULL,
                weight_class TEXT NOT NULL,
                event_name TEXT,
                event_date DATE,
                location TEXT,
                is_main_event BOOLEAN DEFAULT 0,
                is_title_fight BOOLEAN DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (fighter1_id) REFERENCES fighters(id),
                FOREIGN KEY (fighter2_id) REFERENCES fighters(id)
            )
        """)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–º–µ–Ω–æ–π weight_class_id –Ω–∞ weight_class
        cursor.execute("""
            INSERT INTO upcoming_fights_new (
                id, fighter1_id, fighter2_id, weight_class, event_name,
                event_date, location, is_main_event, is_title_fight,
                created_at, updated_at
            )
            SELECT 
                uf.id, uf.fighter1_id, uf.fighter2_id, wc.name_en, uf.event_name,
                uf.event_date, uf.location, uf.is_main_event, uf.is_title_fight,
                uf.created_at, uf.updated_at
            FROM upcoming_fights uf
            JOIN weight_classes wc ON uf.weight_class_id = wc.id
        """)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
        cursor.execute("DROP TABLE upcoming_fights")
        cursor.execute("ALTER TABLE upcoming_fights_new RENAME TO upcoming_fights")
        
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ upcoming_fights –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        print("\n6Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É fight_records...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å weight_class –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        cursor.execute("PRAGMA table_info(fight_records)")
        columns = [col[1] for col in cursor.fetchall()]
        
        if 'weight_class' not in columns:
            cursor.execute("ALTER TABLE fight_records ADD COLUMN weight_class TEXT")
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ weight_class –≤ fight_records")
        
        print("\n7Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É fight_stats...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å weight_class –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        cursor.execute("PRAGMA table_info(fight_stats)")
        columns = [col[1] for col in cursor.fetchall()]
        
        if 'weight_class' not in columns:
            cursor.execute("ALTER TABLE fight_stats ADD COLUMN weight_class TEXT")
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ weight_class –≤ fight_stats")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()
        
        print("\n‚úÖ –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def verify_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–¢–†–£–ö–¢–£–†–´")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect("ufc_ranker_v2.db")
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name NOT LIKE 'sqlite_%'
            ORDER BY name
        """)
        
        tables = cursor.fetchall()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        for table_name, in tables:
            print(f"\nüìã {table_name}:")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()
            
            for col in columns:
                col_id, name, data_type, not_null, default_val, pk = col
                pk_mark = " üîë" if pk else ""
                print(f"   ‚Ä¢ {name} ({data_type}){pk_mark}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {count}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

if __name__ == "__main__":
    if fix_database_structure():
        verify_structure()
    else:
        print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ —É–¥–∞–ª–æ—Å—å")
        sys.exit(1)
